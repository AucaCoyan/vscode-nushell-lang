{"version":3,"file":"extension.js","mappings":"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","sources":[".././node_modules/balanced-match/index.js",".././node_modules/brace-expansion/index.js",".././node_modules/concat-map/index.js",".././node_modules/fs.realpath/index.js",".././node_modules/fs.realpath/old.js",".././node_modules/glob/common.js",".././node_modules/glob/glob.js",".././node_modules/glob/sync.js",".././node_modules/inflight/inflight.js",".././node_modules/inherits/inherits.js",".././node_modules/inherits/inherits_browser.js",".././node_modules/minimatch/minimatch.js",".././node_modules/once/once.js",".././node_modules/path-is-absolute/index.js",".././node_modules/wrappy/wrappy.js","../external \"assert\"","../external \"events\"","../external \"fs\"","../external \"os\"","../external \"path\"","../external \"util\"","../external \"vscode\"","../webpack/bootstrap",".././src/extension.ts"],"sourcesContent":["'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    if(a===b) {\n      return [ai, bi];\n    }\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","module.exports = realpath\nrealpath.realpath = realpath\nrealpath.sync = realpathSync\nrealpath.realpathSync = realpathSync\nrealpath.monkeypatch = monkeypatch\nrealpath.unmonkeypatch = unmonkeypatch\n\nvar fs = require('fs')\nvar origRealpath = fs.realpath\nvar origRealpathSync = fs.realpathSync\n\nvar version = process.version\nvar ok = /^v[0-5]\\./.test(version)\nvar old = require('./old.js')\n\nfunction newError (er) {\n  return er && er.syscall === 'realpath' && (\n    er.code === 'ELOOP' ||\n    er.code === 'ENOMEM' ||\n    er.code === 'ENAMETOOLONG'\n  )\n}\n\nfunction realpath (p, cache, cb) {\n  if (ok) {\n    return origRealpath(p, cache, cb)\n  }\n\n  if (typeof cache === 'function') {\n    cb = cache\n    cache = null\n  }\n  origRealpath(p, cache, function (er, result) {\n    if (newError(er)) {\n      old.realpath(p, cache, cb)\n    } else {\n      cb(er, result)\n    }\n  })\n}\n\nfunction realpathSync (p, cache) {\n  if (ok) {\n    return origRealpathSync(p, cache)\n  }\n\n  try {\n    return origRealpathSync(p, cache)\n  } catch (er) {\n    if (newError(er)) {\n      return old.realpathSync(p, cache)\n    } else {\n      throw er\n    }\n  }\n}\n\nfunction monkeypatch () {\n  fs.realpath = realpath\n  fs.realpathSync = realpathSync\n}\n\nfunction unmonkeypatch () {\n  fs.realpath = origRealpath\n  fs.realpathSync = origRealpathSync\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n","exports.setopts = setopts\nexports.ownProp = ownProp\nexports.makeAbs = makeAbs\nexports.finish = finish\nexports.mark = mark\nexports.isIgnored = isIgnored\nexports.childrenIgnored = childrenIgnored\n\nfunction ownProp (obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field)\n}\n\nvar path = require(\"path\")\nvar minimatch = require(\"minimatch\")\nvar isAbsolute = require(\"path-is-absolute\")\nvar Minimatch = minimatch.Minimatch\n\nfunction alphasort (a, b) {\n  return a.localeCompare(b, 'en')\n}\n\nfunction setupIgnores (self, options) {\n  self.ignore = options.ignore || []\n\n  if (!Array.isArray(self.ignore))\n    self.ignore = [self.ignore]\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap)\n  }\n}\n\n// ignore patterns are always in dot:true mode.\nfunction ignoreMap (pattern) {\n  var gmatcher = null\n  if (pattern.slice(-3) === '/**') {\n    var gpattern = pattern.replace(/(\\/\\*\\*)+$/, '')\n    gmatcher = new Minimatch(gpattern, { dot: true })\n  }\n\n  return {\n    matcher: new Minimatch(pattern, { dot: true }),\n    gmatcher: gmatcher\n  }\n}\n\nfunction setopts (self, pattern, options) {\n  if (!options)\n    options = {}\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && -1 === pattern.indexOf(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\")\n    }\n    pattern = \"**/\" + pattern\n  }\n\n  self.silent = !!options.silent\n  self.pattern = pattern\n  self.strict = options.strict !== false\n  self.realpath = !!options.realpath\n  self.realpathCache = options.realpathCache || Object.create(null)\n  self.follow = !!options.follow\n  self.dot = !!options.dot\n  self.mark = !!options.mark\n  self.nodir = !!options.nodir\n  if (self.nodir)\n    self.mark = true\n  self.sync = !!options.sync\n  self.nounique = !!options.nounique\n  self.nonull = !!options.nonull\n  self.nosort = !!options.nosort\n  self.nocase = !!options.nocase\n  self.stat = !!options.stat\n  self.noprocess = !!options.noprocess\n  self.absolute = !!options.absolute\n\n  self.maxLength = options.maxLength || Infinity\n  self.cache = options.cache || Object.create(null)\n  self.statCache = options.statCache || Object.create(null)\n  self.symlinks = options.symlinks || Object.create(null)\n\n  setupIgnores(self, options)\n\n  self.changedCwd = false\n  var cwd = process.cwd()\n  if (!ownProp(options, \"cwd\"))\n    self.cwd = cwd\n  else {\n    self.cwd = path.resolve(options.cwd)\n    self.changedCwd = self.cwd !== cwd\n  }\n\n  self.root = options.root || path.resolve(self.cwd, \"/\")\n  self.root = path.resolve(self.root)\n  if (process.platform === \"win32\")\n    self.root = self.root.replace(/\\\\/g, \"/\")\n\n  // TODO: is an absolute `cwd` supposed to be resolved against `root`?\n  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd)\n  if (process.platform === \"win32\")\n    self.cwdAbs = self.cwdAbs.replace(/\\\\/g, \"/\")\n  self.nomount = !!options.nomount\n\n  // disable comments and negation in Minimatch.\n  // Note that they are not supported in Glob itself anyway.\n  options.nonegate = true\n  options.nocomment = true\n\n  self.minimatch = new Minimatch(pattern, options)\n  self.options = self.minimatch.options\n}\n\nfunction finish (self) {\n  var nou = self.nounique\n  var all = nou ? [] : Object.create(null)\n\n  for (var i = 0, l = self.matches.length; i < l; i ++) {\n    var matches = self.matches[i]\n    if (!matches || Object.keys(matches).length === 0) {\n      if (self.nonull) {\n        // do like the shell, and spit out the literal glob\n        var literal = self.minimatch.globSet[i]\n        if (nou)\n          all.push(literal)\n        else\n          all[literal] = true\n      }\n    } else {\n      // had matches\n      var m = Object.keys(matches)\n      if (nou)\n        all.push.apply(all, m)\n      else\n        m.forEach(function (m) {\n          all[m] = true\n        })\n    }\n  }\n\n  if (!nou)\n    all = Object.keys(all)\n\n  if (!self.nosort)\n    all = all.sort(alphasort)\n\n  // at *some* point we statted all of these\n  if (self.mark) {\n    for (var i = 0; i < all.length; i++) {\n      all[i] = self._mark(all[i])\n    }\n    if (self.nodir) {\n      all = all.filter(function (e) {\n        var notDir = !(/\\/$/.test(e))\n        var c = self.cache[e] || self.cache[makeAbs(self, e)]\n        if (notDir && c)\n          notDir = c !== 'DIR' && !Array.isArray(c)\n        return notDir\n      })\n    }\n  }\n\n  if (self.ignore.length)\n    all = all.filter(function(m) {\n      return !isIgnored(self, m)\n    })\n\n  self.found = all\n}\n\nfunction mark (self, p) {\n  var abs = makeAbs(self, p)\n  var c = self.cache[abs]\n  var m = p\n  if (c) {\n    var isDir = c === 'DIR' || Array.isArray(c)\n    var slash = p.slice(-1) === '/'\n\n    if (isDir && !slash)\n      m += '/'\n    else if (!isDir && slash)\n      m = m.slice(0, -1)\n\n    if (m !== p) {\n      var mabs = makeAbs(self, m)\n      self.statCache[mabs] = self.statCache[abs]\n      self.cache[mabs] = self.cache[abs]\n    }\n  }\n\n  return m\n}\n\n// lotta situps...\nfunction makeAbs (self, f) {\n  var abs = f\n  if (f.charAt(0) === '/') {\n    abs = path.join(self.root, f)\n  } else if (isAbsolute(f) || f === '') {\n    abs = f\n  } else if (self.changedCwd) {\n    abs = path.resolve(self.cwd, f)\n  } else {\n    abs = path.resolve(f)\n  }\n\n  if (process.platform === 'win32')\n    abs = abs.replace(/\\\\/g, '/')\n\n  return abs\n}\n\n\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n\nfunction childrenIgnored (self, path) {\n  if (!self.ignore.length)\n    return false\n\n  return self.ignore.some(function(item) {\n    return !!(item.gmatcher && item.gmatcher.match(path))\n  })\n}\n","// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nmodule.exports = glob\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar inherits = require('inherits')\nvar EE = require('events').EventEmitter\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar globSync = require('./sync.js')\nvar common = require('./common.js')\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar inflight = require('inflight')\nvar util = require('util')\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nvar once = require('once')\n\nfunction glob (pattern, options, cb) {\n  if (typeof options === 'function') cb = options, options = {}\n  if (!options) options = {}\n\n  if (options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return globSync(pattern, options)\n  }\n\n  return new Glob(pattern, options, cb)\n}\n\nglob.sync = globSync\nvar GlobSync = glob.GlobSync = globSync.GlobSync\n\n// old api surface\nglob.glob = glob\n\nfunction extend (origin, add) {\n  if (add === null || typeof add !== 'object') {\n    return origin\n  }\n\n  var keys = Object.keys(add)\n  var i = keys.length\n  while (i--) {\n    origin[keys[i]] = add[keys[i]]\n  }\n  return origin\n}\n\nglob.hasMagic = function (pattern, options_) {\n  var options = extend({}, options_)\n  options.noprocess = true\n\n  var g = new Glob(pattern, options)\n  var set = g.minimatch.set\n\n  if (!pattern)\n    return false\n\n  if (set.length > 1)\n    return true\n\n  for (var j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== 'string')\n      return true\n  }\n\n  return false\n}\n\nglob.Glob = Glob\ninherits(Glob, EE)\nfunction Glob (pattern, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = null\n  }\n\n  if (options && options.sync) {\n    if (cb)\n      throw new TypeError('callback provided to sync glob')\n    return new GlobSync(pattern, options)\n  }\n\n  if (!(this instanceof Glob))\n    return new Glob(pattern, options, cb)\n\n  setopts(this, pattern, options)\n  this._didRealPath = false\n\n  // process each pattern in the minimatch set\n  var n = this.minimatch.set.length\n\n  // The matches are stored as {<filename>: true,...} so that\n  // duplicates are automagically pruned.\n  // Later, we do an Object.keys() on these.\n  // Keep them as a list so we can fill in when nonull is set.\n  this.matches = new Array(n)\n\n  if (typeof cb === 'function') {\n    cb = once(cb)\n    this.on('error', cb)\n    this.on('end', function (matches) {\n      cb(null, matches)\n    })\n  }\n\n  var self = this\n  this._processing = 0\n\n  this._emitQueue = []\n  this._processQueue = []\n  this.paused = false\n\n  if (this.noprocess)\n    return this\n\n  if (n === 0)\n    return done()\n\n  var sync = true\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false, done)\n  }\n  sync = false\n\n  function done () {\n    --self._processing\n    if (self._processing <= 0) {\n      if (sync) {\n        process.nextTick(function () {\n          self._finish()\n        })\n      } else {\n        self._finish()\n      }\n    }\n  }\n}\n\nGlob.prototype._finish = function () {\n  assert(this instanceof Glob)\n  if (this.aborted)\n    return\n\n  if (this.realpath && !this._didRealpath)\n    return this._realpath()\n\n  common.finish(this)\n  this.emit('end', this.found)\n}\n\nGlob.prototype._realpath = function () {\n  if (this._didRealpath)\n    return\n\n  this._didRealpath = true\n\n  var n = this.matches.length\n  if (n === 0)\n    return this._finish()\n\n  var self = this\n  for (var i = 0; i < this.matches.length; i++)\n    this._realpathSet(i, next)\n\n  function next () {\n    if (--n === 0)\n      self._finish()\n  }\n}\n\nGlob.prototype._realpathSet = function (index, cb) {\n  var matchset = this.matches[index]\n  if (!matchset)\n    return cb()\n\n  var found = Object.keys(matchset)\n  var self = this\n  var n = found.length\n\n  if (n === 0)\n    return cb()\n\n  var set = this.matches[index] = Object.create(null)\n  found.forEach(function (p, i) {\n    // If there's a problem with the stat, then it means that\n    // one or more of the links in the realpath couldn't be\n    // resolved.  just return the abs value in that case.\n    p = self._makeAbs(p)\n    rp.realpath(p, self.realpathCache, function (er, real) {\n      if (!er)\n        set[real] = true\n      else if (er.syscall === 'stat')\n        set[p] = true\n      else\n        self.emit('error', er) // srsly wtf right here\n\n      if (--n === 0) {\n        self.matches[index] = set\n        cb()\n      }\n    })\n  })\n}\n\nGlob.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlob.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n\nGlob.prototype.abort = function () {\n  this.aborted = true\n  this.emit('abort')\n}\n\nGlob.prototype.pause = function () {\n  if (!this.paused) {\n    this.paused = true\n    this.emit('pause')\n  }\n}\n\nGlob.prototype.resume = function () {\n  if (this.paused) {\n    this.emit('resume')\n    this.paused = false\n    if (this._emitQueue.length) {\n      var eq = this._emitQueue.slice(0)\n      this._emitQueue.length = 0\n      for (var i = 0; i < eq.length; i ++) {\n        var e = eq[i]\n        this._emitMatch(e[0], e[1])\n      }\n    }\n    if (this._processQueue.length) {\n      var pq = this._processQueue.slice(0)\n      this._processQueue.length = 0\n      for (var i = 0; i < pq.length; i ++) {\n        var p = pq[i]\n        this._processing--\n        this._process(p[0], p[1], p[2], p[3])\n      }\n    }\n  }\n}\n\nGlob.prototype._process = function (pattern, index, inGlobStar, cb) {\n  assert(this instanceof Glob)\n  assert(typeof cb === 'function')\n\n  if (this.aborted)\n    return\n\n  this._processing++\n  if (this.paused) {\n    this._processQueue.push([pattern, index, inGlobStar, cb])\n    return\n  }\n\n  //console.error('PROCESS %d', this._processing, pattern)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // see if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index, cb)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip _processing\n  if (childrenIgnored(this, read))\n    return cb()\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb)\n}\n\nGlob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\nGlob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return cb()\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return cb()\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return cb()\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix) {\n      if (prefix !== '/')\n        e = prefix + '/' + e\n      else\n        e = prefix + e\n    }\n    this._process([e].concat(remain), index, inGlobStar, cb)\n  }\n  cb()\n}\n\nGlob.prototype._emitMatch = function (index, e) {\n  if (this.aborted)\n    return\n\n  if (isIgnored(this, e))\n    return\n\n  if (this.paused) {\n    this._emitQueue.push([index, e])\n    return\n  }\n\n  var abs = isAbsolute(e) ? e : this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute)\n    e = abs\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  var st = this.statCache[abs]\n  if (st)\n    this.emit('stat', e, st)\n\n  this.emit('match', e)\n}\n\nGlob.prototype._readdirInGlobStar = function (abs, cb) {\n  if (this.aborted)\n    return\n\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false, cb)\n\n  var lstatkey = 'lstat\\0' + abs\n  var self = this\n  var lstatcb = inflight(lstatkey, lstatcb_)\n\n  if (lstatcb)\n    fs.lstat(abs, lstatcb)\n\n  function lstatcb_ (er, lstat) {\n    if (er && er.code === 'ENOENT')\n      return cb()\n\n    var isSym = lstat && lstat.isSymbolicLink()\n    self.symlinks[abs] = isSym\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) {\n      self.cache[abs] = 'FILE'\n      cb()\n    } else\n      self._readdir(abs, false, cb)\n  }\n}\n\nGlob.prototype._readdir = function (abs, inGlobStar, cb) {\n  if (this.aborted)\n    return\n\n  cb = inflight('readdir\\0'+abs+'\\0'+inGlobStar, cb)\n  if (!cb)\n    return\n\n  //console.error('RD %j %j', +inGlobStar, abs)\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs, cb)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return cb()\n\n    if (Array.isArray(c))\n      return cb(null, c)\n  }\n\n  var self = this\n  fs.readdir(abs, readdirCb(this, abs, cb))\n}\n\nfunction readdirCb (self, abs, cb) {\n  return function (er, entries) {\n    if (er)\n      self._readdirError(abs, er, cb)\n    else\n      self._readdirEntries(abs, entries, cb)\n  }\n}\n\nGlob.prototype._readdirEntries = function (abs, entries, cb) {\n  if (this.aborted)\n    return\n\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n  return cb(null, entries)\n}\n\nGlob.prototype._readdirError = function (f, er, cb) {\n  if (this.aborted)\n    return\n\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        this.emit('error', error)\n        this.abort()\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict) {\n        this.emit('error', er)\n        // If the error is handled, then we abort\n        // if not, we threw out of here\n        this.abort()\n      }\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n\n  return cb()\n}\n\nGlob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {\n  var self = this\n  this._readdir(abs, inGlobStar, function (er, entries) {\n    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb)\n  })\n}\n\n\nGlob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n  //console.error('pgs2', prefix, remain[0], entries)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return cb()\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false, cb)\n\n  var isSym = this.symlinks[abs]\n  var len = entries.length\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return cb()\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true, cb)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true, cb)\n  }\n\n  cb()\n}\n\nGlob.prototype._processSimple = function (prefix, index, cb) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var self = this\n  this._stat(prefix, function (er, exists) {\n    self._processSimple2(prefix, index, er, exists, cb)\n  })\n}\nGlob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {\n\n  //console.error('ps2', prefix, exists)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return cb()\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n  cb()\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlob.prototype._stat = function (f, cb) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return cb()\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return cb(null, c)\n\n    if (needDir && c === 'FILE')\n      return cb()\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (stat !== undefined) {\n    if (stat === false)\n      return cb(null, stat)\n    else {\n      var type = stat.isDirectory() ? 'DIR' : 'FILE'\n      if (needDir && type === 'FILE')\n        return cb()\n      else\n        return cb(null, type, stat)\n    }\n  }\n\n  var self = this\n  var statcb = inflight('stat\\0' + abs, lstatcb_)\n  if (statcb)\n    fs.lstat(abs, statcb)\n\n  function lstatcb_ (er, lstat) {\n    if (lstat && lstat.isSymbolicLink()) {\n      // If it's a symlink, then treat it as the target, unless\n      // the target does not exist, then treat it as a file.\n      return fs.stat(abs, function (er, stat) {\n        if (er)\n          self._stat2(f, abs, null, lstat, cb)\n        else\n          self._stat2(f, abs, er, stat, cb)\n      })\n    } else {\n      self._stat2(f, abs, er, lstat, cb)\n    }\n  }\n}\n\nGlob.prototype._stat2 = function (f, abs, er, stat, cb) {\n  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n    this.statCache[abs] = false\n    return cb()\n  }\n\n  var needDir = f.slice(-1) === '/'\n  this.statCache[abs] = stat\n\n  if (abs.slice(-1) === '/' && stat && !stat.isDirectory())\n    return cb(null, false, stat)\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return cb()\n\n  return cb(null, c, stat)\n}\n","module.exports = globSync\nglobSync.GlobSync = GlobSync\n\nvar fs = require('fs')\nvar rp = require('fs.realpath')\nvar minimatch = require('minimatch')\nvar Minimatch = minimatch.Minimatch\nvar Glob = require('./glob.js').Glob\nvar util = require('util')\nvar path = require('path')\nvar assert = require('assert')\nvar isAbsolute = require('path-is-absolute')\nvar common = require('./common.js')\nvar setopts = common.setopts\nvar ownProp = common.ownProp\nvar childrenIgnored = common.childrenIgnored\nvar isIgnored = common.isIgnored\n\nfunction globSync (pattern, options) {\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  return new GlobSync(pattern, options).found\n}\n\nfunction GlobSync (pattern, options) {\n  if (!pattern)\n    throw new Error('must provide pattern')\n\n  if (typeof options === 'function' || arguments.length === 3)\n    throw new TypeError('callback provided to sync glob\\n'+\n                        'See: https://github.com/isaacs/node-glob/issues/167')\n\n  if (!(this instanceof GlobSync))\n    return new GlobSync(pattern, options)\n\n  setopts(this, pattern, options)\n\n  if (this.noprocess)\n    return this\n\n  var n = this.minimatch.set.length\n  this.matches = new Array(n)\n  for (var i = 0; i < n; i ++) {\n    this._process(this.minimatch.set[i], i, false)\n  }\n  this._finish()\n}\n\nGlobSync.prototype._finish = function () {\n  assert(this instanceof GlobSync)\n  if (this.realpath) {\n    var self = this\n    this.matches.forEach(function (matchset, index) {\n      var set = self.matches[index] = Object.create(null)\n      for (var p in matchset) {\n        try {\n          p = self._makeAbs(p)\n          var real = rp.realpathSync(p, self.realpathCache)\n          set[real] = true\n        } catch (er) {\n          if (er.syscall === 'stat')\n            set[self._makeAbs(p)] = true\n          else\n            throw er\n        }\n      }\n    })\n  }\n  common.finish(this)\n}\n\n\nGlobSync.prototype._process = function (pattern, index, inGlobStar) {\n  assert(this instanceof GlobSync)\n\n  // Get the first [n] parts of pattern that are all strings.\n  var n = 0\n  while (typeof pattern[n] === 'string') {\n    n ++\n  }\n  // now n is the index of the first one that is *not* a string.\n\n  // See if there's anything else\n  var prefix\n  switch (n) {\n    // if not, then this is rather simple\n    case pattern.length:\n      this._processSimple(pattern.join('/'), index)\n      return\n\n    case 0:\n      // pattern *starts* with some non-trivial item.\n      // going to readdir(cwd), but not include the prefix in matches.\n      prefix = null\n      break\n\n    default:\n      // pattern has some string bits in the front.\n      // whatever it starts with, whether that's 'absolute' like /foo/bar,\n      // or 'relative' like '../baz'\n      prefix = pattern.slice(0, n).join('/')\n      break\n  }\n\n  var remain = pattern.slice(n)\n\n  // get the list of entries.\n  var read\n  if (prefix === null)\n    read = '.'\n  else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {\n    if (!prefix || !isAbsolute(prefix))\n      prefix = '/' + prefix\n    read = prefix\n  } else\n    read = prefix\n\n  var abs = this._makeAbs(read)\n\n  //if ignored, skip processing\n  if (childrenIgnored(this, read))\n    return\n\n  var isGlobStar = remain[0] === minimatch.GLOBSTAR\n  if (isGlobStar)\n    this._processGlobStar(prefix, read, abs, remain, index, inGlobStar)\n  else\n    this._processReaddir(prefix, read, abs, remain, index, inGlobStar)\n}\n\n\nGlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {\n  var entries = this._readdir(abs, inGlobStar)\n\n  // if the abs isn't a dir, then nothing can match!\n  if (!entries)\n    return\n\n  // It will only match dot entries if it starts with a dot, or if\n  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n  var pn = remain[0]\n  var negate = !!this.minimatch.negate\n  var rawGlob = pn._glob\n  var dotOk = this.dot || rawGlob.charAt(0) === '.'\n\n  var matchedEntries = []\n  for (var i = 0; i < entries.length; i++) {\n    var e = entries[i]\n    if (e.charAt(0) !== '.' || dotOk) {\n      var m\n      if (negate && !prefix) {\n        m = !e.match(pn)\n      } else {\n        m = e.match(pn)\n      }\n      if (m)\n        matchedEntries.push(e)\n    }\n  }\n\n  var len = matchedEntries.length\n  // If there are no matched entries, then nothing matches.\n  if (len === 0)\n    return\n\n  // if this is the last remaining pattern bit, then no need for\n  // an additional stat *unless* the user has specified mark or\n  // stat explicitly.  We know they exist, since readdir returned\n  // them.\n\n  if (remain.length === 1 && !this.mark && !this.stat) {\n    if (!this.matches[index])\n      this.matches[index] = Object.create(null)\n\n    for (var i = 0; i < len; i ++) {\n      var e = matchedEntries[i]\n      if (prefix) {\n        if (prefix.slice(-1) !== '/')\n          e = prefix + '/' + e\n        else\n          e = prefix + e\n      }\n\n      if (e.charAt(0) === '/' && !this.nomount) {\n        e = path.join(this.root, e)\n      }\n      this._emitMatch(index, e)\n    }\n    // This was the last one, and no stats were needed\n    return\n  }\n\n  // now test all matched entries as stand-ins for that part\n  // of the pattern.\n  remain.shift()\n  for (var i = 0; i < len; i ++) {\n    var e = matchedEntries[i]\n    var newPattern\n    if (prefix)\n      newPattern = [prefix, e]\n    else\n      newPattern = [e]\n    this._process(newPattern.concat(remain), index, inGlobStar)\n  }\n}\n\n\nGlobSync.prototype._emitMatch = function (index, e) {\n  if (isIgnored(this, e))\n    return\n\n  var abs = this._makeAbs(e)\n\n  if (this.mark)\n    e = this._mark(e)\n\n  if (this.absolute) {\n    e = abs\n  }\n\n  if (this.matches[index][e])\n    return\n\n  if (this.nodir) {\n    var c = this.cache[abs]\n    if (c === 'DIR' || Array.isArray(c))\n      return\n  }\n\n  this.matches[index][e] = true\n\n  if (this.stat)\n    this._stat(e)\n}\n\n\nGlobSync.prototype._readdirInGlobStar = function (abs) {\n  // follow all symlinked directories forever\n  // just proceed as if this is a non-globstar situation\n  if (this.follow)\n    return this._readdir(abs, false)\n\n  var entries\n  var lstat\n  var stat\n  try {\n    lstat = fs.lstatSync(abs)\n  } catch (er) {\n    if (er.code === 'ENOENT') {\n      // lstat failed, doesn't exist\n      return null\n    }\n  }\n\n  var isSym = lstat && lstat.isSymbolicLink()\n  this.symlinks[abs] = isSym\n\n  // If it's not a symlink or a dir, then it's definitely a regular file.\n  // don't bother doing a readdir in that case.\n  if (!isSym && lstat && !lstat.isDirectory())\n    this.cache[abs] = 'FILE'\n  else\n    entries = this._readdir(abs, false)\n\n  return entries\n}\n\nGlobSync.prototype._readdir = function (abs, inGlobStar) {\n  var entries\n\n  if (inGlobStar && !ownProp(this.symlinks, abs))\n    return this._readdirInGlobStar(abs)\n\n  if (ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n    if (!c || c === 'FILE')\n      return null\n\n    if (Array.isArray(c))\n      return c\n  }\n\n  try {\n    return this._readdirEntries(abs, fs.readdirSync(abs))\n  } catch (er) {\n    this._readdirError(abs, er)\n    return null\n  }\n}\n\nGlobSync.prototype._readdirEntries = function (abs, entries) {\n  // if we haven't asked to stat everything, then just\n  // assume that everything in there exists, so we can avoid\n  // having to stat it a second time.\n  if (!this.mark && !this.stat) {\n    for (var i = 0; i < entries.length; i ++) {\n      var e = entries[i]\n      if (abs === '/')\n        e = abs + e\n      else\n        e = abs + '/' + e\n      this.cache[e] = true\n    }\n  }\n\n  this.cache[abs] = entries\n\n  // mark and cache dir-ness\n  return entries\n}\n\nGlobSync.prototype._readdirError = function (f, er) {\n  // handle errors, and cache the information\n  switch (er.code) {\n    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205\n    case 'ENOTDIR': // totally normal. means it *does* exist.\n      var abs = this._makeAbs(f)\n      this.cache[abs] = 'FILE'\n      if (abs === this.cwdAbs) {\n        var error = new Error(er.code + ' invalid cwd ' + this.cwd)\n        error.path = this.cwd\n        error.code = er.code\n        throw error\n      }\n      break\n\n    case 'ENOENT': // not terribly unusual\n    case 'ELOOP':\n    case 'ENAMETOOLONG':\n    case 'UNKNOWN':\n      this.cache[this._makeAbs(f)] = false\n      break\n\n    default: // some unusual error.  Treat as failure.\n      this.cache[this._makeAbs(f)] = false\n      if (this.strict)\n        throw er\n      if (!this.silent)\n        console.error('glob error', er)\n      break\n  }\n}\n\nGlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {\n\n  var entries = this._readdir(abs, inGlobStar)\n\n  // no entries means not a dir, so it can never have matches\n  // foo.txt/** doesn't match foo.txt\n  if (!entries)\n    return\n\n  // test without the globstar, and with every child both below\n  // and replacing the globstar.\n  var remainWithoutGlobStar = remain.slice(1)\n  var gspref = prefix ? [ prefix ] : []\n  var noGlobStar = gspref.concat(remainWithoutGlobStar)\n\n  // the noGlobStar pattern exits the inGlobStar state\n  this._process(noGlobStar, index, false)\n\n  var len = entries.length\n  var isSym = this.symlinks[abs]\n\n  // If it's a symlink, and we're in a globstar, then stop\n  if (isSym && inGlobStar)\n    return\n\n  for (var i = 0; i < len; i++) {\n    var e = entries[i]\n    if (e.charAt(0) === '.' && !this.dot)\n      continue\n\n    // these two cases enter the inGlobStar state\n    var instead = gspref.concat(entries[i], remainWithoutGlobStar)\n    this._process(instead, index, true)\n\n    var below = gspref.concat(entries[i], remain)\n    this._process(below, index, true)\n  }\n}\n\nGlobSync.prototype._processSimple = function (prefix, index) {\n  // XXX review this.  Shouldn't it be doing the mounting etc\n  // before doing stat?  kinda weird?\n  var exists = this._stat(prefix)\n\n  if (!this.matches[index])\n    this.matches[index] = Object.create(null)\n\n  // If it doesn't exist, then just mark the lack of results\n  if (!exists)\n    return\n\n  if (prefix && isAbsolute(prefix) && !this.nomount) {\n    var trail = /[\\/\\\\]$/.test(prefix)\n    if (prefix.charAt(0) === '/') {\n      prefix = path.join(this.root, prefix)\n    } else {\n      prefix = path.resolve(this.root, prefix)\n      if (trail)\n        prefix += '/'\n    }\n  }\n\n  if (process.platform === 'win32')\n    prefix = prefix.replace(/\\\\/g, '/')\n\n  // Mark this as a match\n  this._emitMatch(index, prefix)\n}\n\n// Returns either 'DIR', 'FILE', or false\nGlobSync.prototype._stat = function (f) {\n  var abs = this._makeAbs(f)\n  var needDir = f.slice(-1) === '/'\n\n  if (f.length > this.maxLength)\n    return false\n\n  if (!this.stat && ownProp(this.cache, abs)) {\n    var c = this.cache[abs]\n\n    if (Array.isArray(c))\n      c = 'DIR'\n\n    // It exists, but maybe not how we need it\n    if (!needDir || c === 'DIR')\n      return c\n\n    if (needDir && c === 'FILE')\n      return false\n\n    // otherwise we have to stat, because maybe c=true\n    // if we know it exists, but not what it is.\n  }\n\n  var exists\n  var stat = this.statCache[abs]\n  if (!stat) {\n    var lstat\n    try {\n      lstat = fs.lstatSync(abs)\n    } catch (er) {\n      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {\n        this.statCache[abs] = false\n        return false\n      }\n    }\n\n    if (lstat && lstat.isSymbolicLink()) {\n      try {\n        stat = fs.statSync(abs)\n      } catch (er) {\n        stat = lstat\n      }\n    } else {\n      stat = lstat\n    }\n  }\n\n  this.statCache[abs] = stat\n\n  var c = true\n  if (stat)\n    c = stat.isDirectory() ? 'DIR' : 'FILE'\n\n  this.cache[abs] = this.cache[abs] || c\n\n  if (needDir && c === 'FILE')\n    return false\n\n  return c\n}\n\nGlobSync.prototype._mark = function (p) {\n  return common.mark(this, p)\n}\n\nGlobSync.prototype._makeAbs = function (f) {\n  return common.makeAbs(this, f)\n}\n","var wrappy = require('wrappy')\nvar reqs = Object.create(null)\nvar once = require('once')\n\nmodule.exports = wrappy(inflight)\n\nfunction inflight (key, cb) {\n  if (reqs[key]) {\n    reqs[key].push(cb)\n    return null\n  } else {\n    reqs[key] = [cb]\n    return makeres(key)\n  }\n}\n\nfunction makeres (key) {\n  return once(function RES () {\n    var cbs = reqs[key]\n    var len = cbs.length\n    var args = slice(arguments)\n\n    // XXX It's somewhat ambiguous whether a new callback added in this\n    // pass should be queued for later execution if something in the\n    // list of callbacks throws, or if it should just be discarded.\n    // However, it's such an edge case that it hardly matters, and either\n    // choice is likely as surprising as the other.\n    // As it happens, we do go ahead and schedule it for later execution.\n    try {\n      for (var i = 0; i < len; i++) {\n        cbs[i].apply(null, args)\n      }\n    } finally {\n      if (cbs.length > len) {\n        // added more in the interim.\n        // de-zalgo, just in case, but don't call again.\n        cbs.splice(0, len)\n        process.nextTick(function () {\n          RES.apply(null, args)\n        })\n      } else {\n        delete reqs[key]\n      }\n    }\n  })\n}\n\nfunction slice (args) {\n  var length = args.length\n  var array = []\n\n  for (var i = 0; i < length; i++) array[i] = args[i]\n  return array\n}\n","try {\n  var util = require('util');\n  /* istanbul ignore next */\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  /* istanbul ignore next */\n  module.exports = require('./inherits_browser.js');\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n","'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n}\n\nfunction win32(path) {\n\t// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = Boolean(device && device.charAt(1) !== ':');\n\n\t// UNC paths are always absolute\n\treturn Boolean(result[2] || isUnc);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n","// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","module.exports = require(\"assert\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"util\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\r\nimport * as vscode from 'vscode';\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    console.log(\"Terminals: \" + (<any>vscode.window).terminals.length);\r\n    context.subscriptions.push(vscode.window.registerTerminalProfileProvider('nushell_default', {\r\n        provideTerminalProfile(token: vscode.CancellationToken): vscode.ProviderResult<vscode.TerminalProfile> {\r\n            const path = require('path');\r\n            const fs = require('fs');\r\n            const glob = require('glob');\r\n            const os = require('os');\r\n\r\n            const pathsToCheck = [\r\n                // cargo install location\r\n                '~/.cargo/bin/nu',\r\n\r\n                // winget on Windows install location\r\n                'c:\\\\program files\\\\nu\\\\bin\\\\nu.exe',\r\n                // just add a few other drives for fun\r\n                'd:\\\\program files\\\\nu\\\\bin\\\\nu.exe',\r\n                'e:\\\\program files\\\\nu\\\\bin\\\\nu.exe',\r\n                'f:\\\\program files\\\\nu\\\\bin\\\\nu.exe',\r\n\r\n                // SCOOP:TODO\r\n                // all user installed programs and scoop itself install to\r\n                // c:\\users\\<user>\\scoop\\ unless SCOOP env var is set\r\n                // globally installed programs go in\r\n                // c:\\programdata\\scoop unless SCOOP_GLOBAL env var is set\r\n                // scoop install location\r\n                '~/scoop/apps/nu/*/nu.exe',\r\n\r\n                // chocolatey install location - same as winget\r\n                // 'c:\\\\program files\\\\nu\\\\bin\\\\nu.exe',\r\n\r\n                // macos dmg install\r\n                // we currentl don't have a dmg install\r\n\r\n                // linux and mac zips can be put anywhere so it's hard to guess\r\n\r\n                // brew install location mac\r\n                '/usr/local/bin/nu',\r\n\r\n                // fdncred install path\r\n                'c:\\\\apps\\\\nushell\\\\nu_latest\\\\nu.exe',\r\n            ];\r\n\r\n            var found_nushell_path = \"\";\r\n            const home = os.homedir();\r\n\r\n            for (var cur_val of pathsToCheck) {\r\n                // console.log(\"Inspecting location: \" + cur_val);\r\n                var constructed_file = \"\";\r\n                if (cur_val.startsWith('~/scoop')) {\r\n                    // console.log(\"Found scoop: \" + cur_val);\r\n                    var p = path.join(home, cur_val.slice(1));\r\n                    // console.log(\"Expanded ~: \" + p);\r\n                    var file = glob.sync(p, \"debug\").toString();\r\n                    // console.log(\"Glob for files: \" + file);\r\n\r\n                    if (file) {\r\n                        // console.log(\"Found some file: \" + file);\r\n                        // if there are slashes, reverse them to back slashes\r\n                        constructed_file = file.replace(/\\//g, '\\\\');\r\n                    }\r\n                }\r\n                else if (cur_val.startsWith('~')) {\r\n                    constructed_file = path.join(home, cur_val.slice(1));\r\n                    // console.log(\"Found ~, constructing path: \" + constructed_file);\r\n                } else {\r\n                    constructed_file = cur_val;\r\n                }\r\n\r\n                if (fs.existsSync(constructed_file)) {\r\n                    // console.log(\"File exists, returning: \" + constructed_file);\r\n                    found_nushell_path = constructed_file;\r\n                    break;\r\n                } else {\r\n                    // console.log(\"File not found: \" + constructed_file);\r\n                }\r\n            }\r\n\r\n            if (found_nushell_path.length > 0) {\r\n                return {\r\n                    options: {\r\n                        name: 'Nushell',\r\n                        shellPath: found_nushell_path\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Nushell not found, returning undefined\");\r\n                return undefined;\r\n            }\r\n        }\r\n    }));\r\n}\r\n// import * as vscode from \"vscode\";\r\n// export function activate(context: vscode.ExtensionContext) {\r\n//     const keywordsWithSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\"nushell\", {\r\n//             provideCompletionItems(\r\n//                 document: vscode.TextDocument,\r\n//                 position: vscode.Position,\r\n//                 token: vscode.CancellationToken,\r\n//                 context: vscode.CompletionContext\r\n//             ) {\r\n//                 const aliasCompletion = new vscode.CompletionItem(\"alias\");\r\n//                 aliasCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const allCompletion = new vscode.CompletionItem(\"all?\");\r\n//                 allCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const ansiCompletion = new vscode.CompletionItem(\"ansi\");\r\n//                 ansiCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const anyCompletion = new vscode.CompletionItem(\"any?\");\r\n//                 anyCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const appendCompletion = new vscode.CompletionItem(\"append\");\r\n//                 appendCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const autoenvCompletion = new vscode.CompletionItem(\"autoenv\");\r\n//                 autoenvCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const autoviewCompletion = new vscode.CompletionItem(\"autoview\");\r\n//                 autoviewCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const benchmarkCompletion = new vscode.CompletionItem(\"benchmark\");\r\n//                 benchmarkCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const binaryviewCompletion = new vscode.CompletionItem(\"binaryview\");\r\n//                 binaryviewCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const buildStringCompletion = new vscode.CompletionItem(\"build-string\");\r\n//                 buildStringCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const calCompletion = new vscode.CompletionItem(\"cal\");\r\n//                 calCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const cdCompletion = new vscode.CompletionItem(\"cd\");\r\n//                 cdCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const charCompletion = new vscode.CompletionItem(\"char\");\r\n//                 charCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const chartCompletion = new vscode.CompletionItem(\"chart\");\r\n//                 chartCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const clearCompletion = new vscode.CompletionItem(\"clear\");\r\n//                 clearCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const clipCompletion = new vscode.CompletionItem(\"clip\");\r\n//                 clipCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const collectCompletion = new vscode.CompletionItem(\"collect\");\r\n//                 collectCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const compactCompletion = new vscode.CompletionItem(\"compact\");\r\n//                 compactCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const configCompletion = new vscode.CompletionItem(\"config\");\r\n//                 configCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const cpCompletion = new vscode.CompletionItem(\"cp\");\r\n//                 cpCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const dataframeCompletion = new vscode.CompletionItem(\"dataframe\");\r\n//                 dataframeCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const dateCompletion = new vscode.CompletionItem(\"date\");\r\n//                 dateCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const debugCompletion = new vscode.CompletionItem(\"debug\");\r\n//                 debugCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const defCompletion = new vscode.CompletionItem(\"def\");\r\n//                 defCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const defaultCompletion = new vscode.CompletionItem(\"default\");\r\n//                 defaultCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const describeCompletion = new vscode.CompletionItem(\"describe\");\r\n//                 describeCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const doCompletion = new vscode.CompletionItem(\"do\");\r\n//                 doCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const dropCompletion = new vscode.CompletionItem(\"drop\");\r\n//                 dropCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const duCompletion = new vscode.CompletionItem(\"du\");\r\n//                 duCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const eachCompletion = new vscode.CompletionItem(\"each\");\r\n//                 eachCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const echoCompletion = new vscode.CompletionItem(\"echo\");\r\n//                 echoCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const emptyCompletion = new vscode.CompletionItem(\"empty?\");\r\n//                 emptyCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const enterCompletion = new vscode.CompletionItem(\"enter\");\r\n//                 enterCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const everyCompletion = new vscode.CompletionItem(\"every\");\r\n//                 everyCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const execCompletion = new vscode.CompletionItem(\"exec\");\r\n//                 execCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const exitCompletion = new vscode.CompletionItem(\"exit\");\r\n//                 exitCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const fetchCompletion = new vscode.CompletionItem(\"fetch\");\r\n//                 fetchCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const firstCompletion = new vscode.CompletionItem(\"first\");\r\n//                 firstCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const flattenCompletion = new vscode.CompletionItem(\"flatten\");\r\n//                 flattenCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const forCompletion = new vscode.CompletionItem(\"for\");\r\n//                 forCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const formatCompletion = new vscode.CompletionItem(\"format\");\r\n//                 formatCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const fromCompletion = new vscode.CompletionItem(\"from\");\r\n//                 fromCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const genTsCmdsCompletion = new vscode.CompletionItem(\"gen-ts-cmds\");\r\n//                 genTsCmdsCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const genTsSubsCompletion = new vscode.CompletionItem(\"gen-ts-subs\");\r\n//                 genTsSubsCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const getCompletion = new vscode.CompletionItem(\"get\");\r\n//                 getCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const groupByCompletion = new vscode.CompletionItem(\"group-by\");\r\n//                 groupByCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const hashCompletion = new vscode.CompletionItem(\"hash\");\r\n//                 hashCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const headersCompletion = new vscode.CompletionItem(\"headers\");\r\n//                 headersCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const helpCompletion = new vscode.CompletionItem(\"help\");\r\n//                 helpCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const histogramCompletion = new vscode.CompletionItem(\"histogram\");\r\n//                 histogramCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const historyCompletion = new vscode.CompletionItem(\"history\");\r\n//                 historyCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const ifCompletion = new vscode.CompletionItem(\"if\");\r\n//                 ifCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const ignoreCompletion = new vscode.CompletionItem(\"ignore\");\r\n//                 ignoreCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const incCompletion = new vscode.CompletionItem(\"inc\");\r\n//                 incCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const insertCompletion = new vscode.CompletionItem(\"insert\");\r\n//                 insertCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const intoCompletion = new vscode.CompletionItem(\"into\");\r\n//                 intoCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const keepCompletion = new vscode.CompletionItem(\"keep\");\r\n//                 keepCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const killCompletion = new vscode.CompletionItem(\"kill\");\r\n//                 killCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const lastCompletion = new vscode.CompletionItem(\"last\");\r\n//                 lastCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const lengthCompletion = new vscode.CompletionItem(\"length\");\r\n//                 lengthCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const letCompletion = new vscode.CompletionItem(\"let\");\r\n//                 letCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const letEnvCompletion = new vscode.CompletionItem(\"let-env\");\r\n//                 letEnvCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const linesCompletion = new vscode.CompletionItem(\"lines\");\r\n//                 linesCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const loadEnvCompletion = new vscode.CompletionItem(\"load-env\");\r\n//                 loadEnvCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const lsCompletion = new vscode.CompletionItem(\"ls\");\r\n//                 lsCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const matchCompletion = new vscode.CompletionItem(\"match\");\r\n//                 matchCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const mathCompletion = new vscode.CompletionItem(\"math\");\r\n//                 mathCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const mergeCompletion = new vscode.CompletionItem(\"merge\");\r\n//                 mergeCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const mkdirCompletion = new vscode.CompletionItem(\"mkdir\");\r\n//                 mkdirCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const moveCompletion = new vscode.CompletionItem(\"move\");\r\n//                 moveCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const mvCompletion = new vscode.CompletionItem(\"mv\");\r\n//                 mvCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const nCompletion = new vscode.CompletionItem(\"n\");\r\n//                 nCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const nthCompletion = new vscode.CompletionItem(\"nth\");\r\n//                 nthCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const openCompletion = new vscode.CompletionItem(\"open\");\r\n//                 openCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const pCompletion = new vscode.CompletionItem(\"p\");\r\n//                 pCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const parseCompletion = new vscode.CompletionItem(\"parse\");\r\n//                 parseCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const pasteCompletion = new vscode.CompletionItem(\"paste\");\r\n//                 pasteCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const pathCompletion = new vscode.CompletionItem(\"path\");\r\n//                 pathCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const pathvarCompletion = new vscode.CompletionItem(\"pathvar\");\r\n//                 pathvarCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const pivotCompletion = new vscode.CompletionItem(\"pivot\");\r\n//                 pivotCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const postCompletion = new vscode.CompletionItem(\"post\");\r\n//                 postCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const prependCompletion = new vscode.CompletionItem(\"prepend\");\r\n//                 prependCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const psCompletion = new vscode.CompletionItem(\"ps\");\r\n//                 psCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const pwdCompletion = new vscode.CompletionItem(\"pwd\");\r\n//                 pwdCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const randomCompletion = new vscode.CompletionItem(\"random\");\r\n//                 randomCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const rangeCompletion = new vscode.CompletionItem(\"range\");\r\n//                 rangeCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const reduceCompletion = new vscode.CompletionItem(\"reduce\");\r\n//                 reduceCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const rejectCompletion = new vscode.CompletionItem(\"reject\");\r\n//                 rejectCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const renameCompletion = new vscode.CompletionItem(\"rename\");\r\n//                 renameCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const reverseCompletion = new vscode.CompletionItem(\"reverse\");\r\n//                 reverseCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const rmCompletion = new vscode.CompletionItem(\"rm\");\r\n//                 rmCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const rollCompletion = new vscode.CompletionItem(\"roll\");\r\n//                 rollCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const rotateCompletion = new vscode.CompletionItem(\"rotate\");\r\n//                 rotateCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const s3Completion = new vscode.CompletionItem(\"s3\");\r\n//                 s3Completion.commitCharacters = [\".\"];\r\n\r\n//                 const saveCompletion = new vscode.CompletionItem(\"save\");\r\n//                 saveCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const selectCompletion = new vscode.CompletionItem(\"select\");\r\n//                 selectCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const selectorCompletion = new vscode.CompletionItem(\"selector\");\r\n//                 selectorCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const seqCompletion = new vscode.CompletionItem(\"seq\");\r\n//                 seqCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const shellsCompletion = new vscode.CompletionItem(\"shells\");\r\n//                 shellsCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const shuffleCompletion = new vscode.CompletionItem(\"shuffle\");\r\n//                 shuffleCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const sizeCompletion = new vscode.CompletionItem(\"size\");\r\n//                 sizeCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const skipCompletion = new vscode.CompletionItem(\"skip\");\r\n//                 skipCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const sleepCompletion = new vscode.CompletionItem(\"sleep\");\r\n//                 sleepCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const sortByCompletion = new vscode.CompletionItem(\"sort-by\");\r\n//                 sortByCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const sourceCompletion = new vscode.CompletionItem(\"source\");\r\n//                 sourceCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const splitCompletion = new vscode.CompletionItem(\"split\");\r\n//                 splitCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const splitByCompletion = new vscode.CompletionItem(\"split-by\");\r\n//                 splitByCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const startCompletion = new vscode.CompletionItem(\"start\");\r\n//                 startCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const strCompletion = new vscode.CompletionItem(\"str\");\r\n//                 strCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const sysCompletion = new vscode.CompletionItem(\"sys\");\r\n//                 sysCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const tableCompletion = new vscode.CompletionItem(\"table\");\r\n//                 tableCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const tagsCompletion = new vscode.CompletionItem(\"tags\");\r\n//                 tagsCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const textviewCompletion = new vscode.CompletionItem(\"textview\");\r\n//                 textviewCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const toCompletion = new vscode.CompletionItem(\"to\");\r\n//                 toCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const touchCompletion = new vscode.CompletionItem(\"touch\");\r\n//                 touchCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const treeCompletion = new vscode.CompletionItem(\"tree\");\r\n//                 treeCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const uniqCompletion = new vscode.CompletionItem(\"uniq\");\r\n//                 uniqCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const unletEnvCompletion = new vscode.CompletionItem(\"unlet-env\");\r\n//                 unletEnvCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const updateCompletion = new vscode.CompletionItem(\"update\");\r\n//                 updateCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const urlCompletion = new vscode.CompletionItem(\"url\");\r\n//                 urlCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const versionCompletion = new vscode.CompletionItem(\"version\");\r\n//                 versionCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const whereCompletion = new vscode.CompletionItem(\"where\");\r\n//                 whereCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const whichCompletion = new vscode.CompletionItem(\"which\");\r\n//                 whichCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const withEnvCompletion = new vscode.CompletionItem(\"with-env\");\r\n//                 withEnvCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const wrapCompletion = new vscode.CompletionItem(\"wrap\");\r\n//                 wrapCompletion.commitCharacters = [\".\"];\r\n\r\n//                 const xpathCompletion = new vscode.CompletionItem(\"xpath\");\r\n//                 xpathCompletion.commitCharacters = [\".\"];\r\n\r\n//                 return [\r\n//                     aliasCompletion,\r\n//                     allCompletion,\r\n//                     ansiCompletion,\r\n//                     anyCompletion,\r\n//                     appendCompletion,\r\n//                     autoenvCompletion,\r\n//                     autoviewCompletion,\r\n//                     benchmarkCompletion,\r\n//                     binaryviewCompletion,\r\n//                     buildStringCompletion,\r\n//                     calCompletion,\r\n//                     cdCompletion,\r\n//                     charCompletion,\r\n//                     chartCompletion,\r\n//                     clearCompletion,\r\n//                     clipCompletion,\r\n//                     collectCompletion,\r\n//                     compactCompletion,\r\n//                     configCompletion,\r\n//                     cpCompletion,\r\n//                     dataframeCompletion,\r\n//                     dateCompletion,\r\n//                     debugCompletion,\r\n//                     defCompletion,\r\n//                     defaultCompletion,\r\n//                     describeCompletion,\r\n//                     doCompletion,\r\n//                     dropCompletion,\r\n//                     duCompletion,\r\n//                     eachCompletion,\r\n//                     echoCompletion,\r\n//                     emptyCompletion,\r\n//                     enterCompletion,\r\n//                     everyCompletion,\r\n//                     execCompletion,\r\n//                     exitCompletion,\r\n//                     fetchCompletion,\r\n//                     firstCompletion,\r\n//                     flattenCompletion,\r\n//                     forCompletion,\r\n//                     formatCompletion,\r\n//                     fromCompletion,\r\n//                     genTsCmdsCompletion,\r\n//                     genTsSubsCompletion,\r\n//                     getCompletion,\r\n//                     groupByCompletion,\r\n//                     hashCompletion,\r\n//                     headersCompletion,\r\n//                     helpCompletion,\r\n//                     histogramCompletion,\r\n//                     historyCompletion,\r\n//                     ifCompletion,\r\n//                     ignoreCompletion,\r\n//                     incCompletion,\r\n//                     insertCompletion,\r\n//                     intoCompletion,\r\n//                     keepCompletion,\r\n//                     killCompletion,\r\n//                     lastCompletion,\r\n//                     lengthCompletion,\r\n//                     letCompletion,\r\n//                     letEnvCompletion,\r\n//                     linesCompletion,\r\n//                     loadEnvCompletion,\r\n//                     lsCompletion,\r\n//                     matchCompletion,\r\n//                     mathCompletion,\r\n//                     mergeCompletion,\r\n//                     mkdirCompletion,\r\n//                     moveCompletion,\r\n//                     mvCompletion,\r\n//                     nCompletion,\r\n//                     nthCompletion,\r\n//                     openCompletion,\r\n//                     pCompletion,\r\n//                     parseCompletion,\r\n//                     pasteCompletion,\r\n//                     pathCompletion,\r\n//                     pathvarCompletion,\r\n//                     pivotCompletion,\r\n//                     postCompletion,\r\n//                     prependCompletion,\r\n//                     psCompletion,\r\n//                     pwdCompletion,\r\n//                     randomCompletion,\r\n//                     rangeCompletion,\r\n//                     reduceCompletion,\r\n//                     rejectCompletion,\r\n//                     renameCompletion,\r\n//                     reverseCompletion,\r\n//                     rmCompletion,\r\n//                     rollCompletion,\r\n//                     rotateCompletion,\r\n//                     s3Completion,\r\n//                     saveCompletion,\r\n//                     selectCompletion,\r\n//                     selectorCompletion,\r\n//                     seqCompletion,\r\n//                     shellsCompletion,\r\n//                     shuffleCompletion,\r\n//                     sizeCompletion,\r\n//                     skipCompletion,\r\n//                     sleepCompletion,\r\n//                     sortByCompletion,\r\n//                     sourceCompletion,\r\n//                     splitCompletion,\r\n//                     splitByCompletion,\r\n//                     startCompletion,\r\n//                     strCompletion,\r\n//                     sysCompletion,\r\n//                     tableCompletion,\r\n//                     tagsCompletion,\r\n//                     textviewCompletion,\r\n//                     toCompletion,\r\n//                     touchCompletion,\r\n//                     treeCompletion,\r\n//                     uniqCompletion,\r\n//                     unletEnvCompletion,\r\n//                     updateCompletion,\r\n//                     urlCompletion,\r\n//                     versionCompletion,\r\n//                     whereCompletion,\r\n//                     whichCompletion,\r\n//                     withEnvCompletion,\r\n//                     wrapCompletion,\r\n//                     xpathCompletion,\r\n//                 ];\r\n//             },\r\n//         });\r\n\r\n//     const ansiSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"ansi \")) {\r\n//                         const ansiGradient = new vscode.CompletionItem(\r\n//                             \"gradient\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         ansiGradient.detail =\r\n//                             \"draw text with a provided start and end code making a gradient\";\r\n\r\n//                         const ansiStrip = new vscode.CompletionItem(\r\n//                             \"strip\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         ansiStrip.detail = \"strip ansi escape sequences from string\";\r\n\r\n//                         return [ansiGradient, ansiStrip];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const autoenvSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"autoenv \")) {\r\n//                         const autoenvTrust = new vscode.CompletionItem(\r\n//                             \"trust\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         autoenvTrust.detail =\r\n//                             \"Trust a .nu-env file in the current or given directory\";\r\n\r\n//                         const autoenvUntrust = new vscode.CompletionItem(\r\n//                             \"untrust\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         autoenvUntrust.detail =\r\n//                             \"Untrust a .nu-env file in the current or given directory\";\r\n\r\n//                         return [autoenvTrust, autoenvUntrust];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const chartSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"chart \")) {\r\n//                         const chartBar = new vscode.CompletionItem(\r\n//                             \"bar\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         chartBar.detail = \"Bar charts\";\r\n\r\n//                         const chartLine = new vscode.CompletionItem(\r\n//                             \"line\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         chartLine.detail = \"Line charts\";\r\n\r\n//                         return [chartBar, chartLine];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const configSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"config \")) {\r\n//                         const configClear = new vscode.CompletionItem(\r\n//                             \"clear\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         configClear.detail = \"clear the config\";\r\n\r\n//                         const configGet = new vscode.CompletionItem(\r\n//                             \"get\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         configGet.detail = \"Gets a value from the config\";\r\n\r\n//                         const configPath = new vscode.CompletionItem(\r\n//                             \"path\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         configPath.detail = \"return the path to the config file\";\r\n\r\n//                         const configRemove = new vscode.CompletionItem(\r\n//                             \"remove\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         configRemove.detail = \"Removes a value from the config\";\r\n\r\n//                         const configSet = new vscode.CompletionItem(\r\n//                             \"set\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         configSet.detail = \"Sets a value in the config\";\r\n\r\n//                         const configSetInto = new vscode.CompletionItem(\r\n//                             \"set_into\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         configSetInto.detail = \"Sets a value in the config\";\r\n\r\n//                         return [\r\n//                             configClear,\r\n//                             configGet,\r\n//                             configPath,\r\n//                             configRemove,\r\n//                             configSet,\r\n//                             configSetInto,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const dataframeSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"dataframe \")) {\r\n//                         const dataframeAggregate = new vscode.CompletionItem(\r\n//                             \"aggregate\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeAggregate.detail =\r\n//                             \"[DataFrame, GroupBy, Series] Performs an aggregation operation on a dataframe, groupby or series object\";\r\n\r\n//                         const dataframeAllFalse = new vscode.CompletionItem(\r\n//                             \"all-false\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeAllFalse.detail =\r\n//                             \"[Series] Returns true if all values are false\";\r\n\r\n//                         const dataframeAllTrue = new vscode.CompletionItem(\r\n//                             \"all-true\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeAllTrue.detail =\r\n//                             \"[Series] Returns true if all values are true\";\r\n\r\n//                         const dataframeAppend = new vscode.CompletionItem(\r\n//                             \"append\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeAppend.detail = \"[DataFrame] Appends a new dataframe\";\r\n\r\n//                         const dataframeArgMax = new vscode.CompletionItem(\r\n//                             \"arg-max\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeArgMax.detail =\r\n//                             \"[Series] Return index for max value in series\";\r\n\r\n//                         const dataframeArgMin = new vscode.CompletionItem(\r\n//                             \"arg-min\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeArgMin.detail =\r\n//                             \"[Series] Return index for min value in series\";\r\n\r\n//                         const dataframeArgSort = new vscode.CompletionItem(\r\n//                             \"arg-sort\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeArgSort.detail =\r\n//                             \"[Series] Returns indexes for a sorted series\";\r\n\r\n//                         const dataframeArgTrue = new vscode.CompletionItem(\r\n//                             \"arg-true\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeArgTrue.detail =\r\n//                             \"[Series] Returns indexes where values are true\";\r\n\r\n//                         const dataframeArgUnique = new vscode.CompletionItem(\r\n//                             \"arg-unique\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeArgUnique.detail =\r\n//                             \"[Series] Returns indexes for unique values\";\r\n\r\n//                         const dataframeColumn = new vscode.CompletionItem(\r\n//                             \"column\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeColumn.detail =\r\n//                             \"[DataFrame] Returns the selected column as Series\";\r\n\r\n//                         const dataframeConcatenate = new vscode.CompletionItem(\r\n//                             \"concatenate\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeConcatenate.detail =\r\n//                             \"[Series] Concatenates strings with other array\";\r\n\r\n//                         const dataframeContains = new vscode.CompletionItem(\r\n//                             \"contains\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeContains.detail =\r\n//                             \"[Series] Checks if a patter is contained in a string\";\r\n\r\n//                         const dataframeCountNull = new vscode.CompletionItem(\r\n//                             \"count-null\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeCountNull.detail = \"[Series] Counts null values\";\r\n\r\n//                         const dataframeCountUnique = new vscode.CompletionItem(\r\n//                             \"count-unique\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeCountUnique.detail = \"[Series] Counts unique value\";\r\n\r\n//                         const dataframeDrop = new vscode.CompletionItem(\r\n//                             \"drop\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeDrop.detail =\r\n//                             \"[DataFrame] Creates a new dataframe by dropping the selected columns\";\r\n\r\n//                         const dataframeDropDuplicates = new vscode.CompletionItem(\r\n//                             \"drop-duplicates\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeDropDuplicates.detail =\r\n//                             \"[DataFrame] Drops duplicate values in dataframe\";\r\n\r\n//                         const dataframeDropNulls = new vscode.CompletionItem(\r\n//                             \"drop-nulls\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeDropNulls.detail =\r\n//                             \"[DataFrame, Series] Drops null values in dataframe\";\r\n\r\n//                         const dataframeDtypes = new vscode.CompletionItem(\r\n//                             \"dtypes\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeDtypes.detail = \"[DataFrame] Show dataframe data types\";\r\n\r\n//                         const dataframeFilterWith = new vscode.CompletionItem(\r\n//                             \"filter-with\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeFilterWith.detail =\r\n//                             \"[DataFrame] Filters dataframe using a mask as reference\";\r\n\r\n//                         const dataframeFirst = new vscode.CompletionItem(\r\n//                             \"first\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeFirst.detail =\r\n//                             \"[DataFrame] Creates new dataframe with first rows\";\r\n\r\n//                         const dataframeGet = new vscode.CompletionItem(\r\n//                             \"get\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeGet.detail =\r\n//                             \"[DataFrame] Creates dataframe with the selected columns\";\r\n\r\n//                         const dataframeGroupBy = new vscode.CompletionItem(\r\n//                             \"group-by\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeGroupBy.detail =\r\n//                             \"[DataFrame] Creates a groupby object that can be used for other aggregations\";\r\n\r\n//                         const dataframeIsDuplicated = new vscode.CompletionItem(\r\n//                             \"is-duplicated\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeIsDuplicated.detail =\r\n//                             \"[Series] Creates mask indicating duplicated values\";\r\n\r\n//                         const dataframeIsIn = new vscode.CompletionItem(\r\n//                             \"is-in\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeIsIn.detail =\r\n//                             \"[Series] Checks if elements from a series are contained in right series\";\r\n\r\n//                         const dataframeIsNotNull = new vscode.CompletionItem(\r\n//                             \"is-not-null\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeIsNotNull.detail =\r\n//                             \"[Series] Creates mask where value is not null\";\r\n\r\n//                         const dataframeIsNull = new vscode.CompletionItem(\r\n//                             \"is-null\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeIsNull.detail =\r\n//                             \"[Series] Creates mask where value is null\";\r\n\r\n//                         const dataframeIsUnique = new vscode.CompletionItem(\r\n//                             \"is-unique\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeIsUnique.detail =\r\n//                             \"[Series] Creates mask indicating unique values\";\r\n\r\n//                         const dataframeJoin = new vscode.CompletionItem(\r\n//                             \"join\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeJoin.detail =\r\n//                             \"[DataFrame] Joins a dataframe using columns as reference\";\r\n\r\n//                         const dataframeLast = new vscode.CompletionItem(\r\n//                             \"last\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeLast.detail =\r\n//                             \"[DataFrame] Creates new dataframe with tail rows\";\r\n\r\n//                         const dataframeList = new vscode.CompletionItem(\r\n//                             \"list\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeList.detail = \"Lists stored dataframes\";\r\n\r\n//                         const dataframeMelt = new vscode.CompletionItem(\r\n//                             \"melt\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeMelt.detail =\r\n//                             \"[DataFrame] Unpivot a DataFrame from wide to long format\";\r\n\r\n//                         const dataframeNot = new vscode.CompletionItem(\r\n//                             \"not\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeNot.detail = \"[Series] Inverts boolean mask\";\r\n\r\n//                         const dataframeOpen = new vscode.CompletionItem(\r\n//                             \"open\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeOpen.detail =\r\n//                             \"Opens csv, json or parquet file to create dataframe\";\r\n\r\n//                         const dataframePivot = new vscode.CompletionItem(\r\n//                             \"pivot\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframePivot.detail =\r\n//                             \"[GroupBy] Performs a pivot operation on a groupby object\";\r\n\r\n//                         const dataframeRename = new vscode.CompletionItem(\r\n//                             \"rename\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeRename.detail = \"[Series] Renames a series\";\r\n\r\n//                         const dataframeReplace = new vscode.CompletionItem(\r\n//                             \"replace\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeReplace.detail =\r\n//                             \"[Series] Replace the leftmost (sub)string by a regex pattern\";\r\n\r\n//                         const dataframeReplaceAll = new vscode.CompletionItem(\r\n//                             \"replace-all\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeReplaceAll.detail =\r\n//                             \"[Series] Replace all (sub)strings by a regex pattern\";\r\n\r\n//                         const dataframeSample = new vscode.CompletionItem(\r\n//                             \"sample\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeSample.detail = \"[DataFrame] Create sample dataframe\";\r\n\r\n//                         const dataframeSelect = new vscode.CompletionItem(\r\n//                             \"select\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeSelect.detail =\r\n//                             \"[DataFrame] Creates a new dataframe with the selected columns\";\r\n\r\n//                         const dataframeSet = new vscode.CompletionItem(\r\n//                             \"set\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeSet.detail =\r\n//                             \"[Series] Sets value where given mask is true\";\r\n\r\n//                         const dataframeSetWithIdx = new vscode.CompletionItem(\r\n//                             \"set-with-idx\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeSetWithIdx.detail =\r\n//                             \"[Series] Sets value in the given index\";\r\n\r\n//                         const dataframeShape = new vscode.CompletionItem(\r\n//                             \"shape\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeShape.detail =\r\n//                             \"[DataFrame] Shows column and row size for a dataframe\";\r\n\r\n//                         const dataframeShift = new vscode.CompletionItem(\r\n//                             \"shift\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeShift.detail =\r\n//                             \"[Series] Shifts the values by a given period\";\r\n\r\n//                         const dataframeShow = new vscode.CompletionItem(\r\n//                             \"show\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeShow.detail =\r\n//                             \"[DataFrame] Converts a section of the dataframe to a Table or List value\";\r\n\r\n//                         const dataframeSlice = new vscode.CompletionItem(\r\n//                             \"slice\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeSlice.detail =\r\n//                             \"[DataFrame] Creates new dataframe from a slice of rows\";\r\n\r\n//                         const dataframeSort = new vscode.CompletionItem(\r\n//                             \"sort\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeSort.detail =\r\n//                             \"[DataFrame, Series] Creates new sorted dataframe or series\";\r\n\r\n//                         const dataframeStrLengths = new vscode.CompletionItem(\r\n//                             \"str-lengths\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeStrLengths.detail = \"[Series] Get lengths of all strings\";\r\n\r\n//                         const dataframeStrSlice = new vscode.CompletionItem(\r\n//                             \"str-slice\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeStrSlice.detail =\r\n//                             \"[Series] Slices the string from the start position until the selected length\";\r\n\r\n//                         const dataframeTake = new vscode.CompletionItem(\r\n//                             \"take\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeTake.detail =\r\n//                             \"[DataFrame, Series] Creates new dataframe using the given indices\";\r\n\r\n//                         const dataframeToCsv = new vscode.CompletionItem(\r\n//                             \"to-csv\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeToCsv.detail = \"[DataFrame] Saves dataframe to csv file\";\r\n\r\n//                         const dataframeToDf = new vscode.CompletionItem(\r\n//                             \"to-df\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeToDf.detail =\r\n//                             \"Converts a List, Table or Dictionary into a polars dataframe\";\r\n\r\n//                         const dataframeToDummies = new vscode.CompletionItem(\r\n//                             \"to-dummies\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeToDummies.detail =\r\n//                             \"[DataFrame] Creates a new dataframe with dummy variables\";\r\n\r\n//                         const dataframeToLowercase = new vscode.CompletionItem(\r\n//                             \"to-lowercase\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeToLowercase.detail =\r\n//                             \"[Series] Lowercase the strings in the column\";\r\n\r\n//                         const dataframeToParquet = new vscode.CompletionItem(\r\n//                             \"to-parquet\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeToParquet.detail =\r\n//                             \"[DataFrame] Saves dataframe to parquet file\";\r\n\r\n//                         const dataframeToUppercase = new vscode.CompletionItem(\r\n//                             \"to-uppercase\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeToUppercase.detail =\r\n//                             \"[Series] Uppercase the strings in the column\";\r\n\r\n//                         const dataframeUnique = new vscode.CompletionItem(\r\n//                             \"unique\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeUnique.detail =\r\n//                             \"[Series] Returns unique values from a series\";\r\n\r\n//                         const dataframeValueCounts = new vscode.CompletionItem(\r\n//                             \"value-counts\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeValueCounts.detail =\r\n//                             \"[Series] Returns a dataframe with the counts for unique values in series\";\r\n\r\n//                         const dataframeWhere = new vscode.CompletionItem(\r\n//                             \"where\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeWhere.detail =\r\n//                             \"[DataFrame] Filter dataframe to match the condition\";\r\n\r\n//                         const dataframeWithColumn = new vscode.CompletionItem(\r\n//                             \"with-column\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dataframeWithColumn.detail =\r\n//                             \"[DataFrame] Adds a series to the dataframe\";\r\n\r\n//                         return [\r\n//                             dataframeAggregate,\r\n//                             dataframeAllFalse,\r\n//                             dataframeAllTrue,\r\n//                             dataframeAppend,\r\n//                             dataframeArgMax,\r\n//                             dataframeArgMin,\r\n//                             dataframeArgSort,\r\n//                             dataframeArgTrue,\r\n//                             dataframeArgUnique,\r\n//                             dataframeColumn,\r\n//                             dataframeConcatenate,\r\n//                             dataframeContains,\r\n//                             dataframeCountNull,\r\n//                             dataframeCountUnique,\r\n//                             dataframeDrop,\r\n//                             dataframeDropDuplicates,\r\n//                             dataframeDropNulls,\r\n//                             dataframeDtypes,\r\n//                             dataframeFilterWith,\r\n//                             dataframeFirst,\r\n//                             dataframeGet,\r\n//                             dataframeGroupBy,\r\n//                             dataframeIsDuplicated,\r\n//                             dataframeIsIn,\r\n//                             dataframeIsNotNull,\r\n//                             dataframeIsNull,\r\n//                             dataframeIsUnique,\r\n//                             dataframeJoin,\r\n//                             dataframeLast,\r\n//                             dataframeList,\r\n//                             dataframeMelt,\r\n//                             dataframeNot,\r\n//                             dataframeOpen,\r\n//                             dataframePivot,\r\n//                             dataframeRename,\r\n//                             dataframeReplace,\r\n//                             dataframeReplaceAll,\r\n//                             dataframeSample,\r\n//                             dataframeSelect,\r\n//                             dataframeSet,\r\n//                             dataframeSetWithIdx,\r\n//                             dataframeShape,\r\n//                             dataframeShift,\r\n//                             dataframeShow,\r\n//                             dataframeSlice,\r\n//                             dataframeSort,\r\n//                             dataframeStrLengths,\r\n//                             dataframeStrSlice,\r\n//                             dataframeTake,\r\n//                             dataframeToCsv,\r\n//                             dataframeToDf,\r\n//                             dataframeToDummies,\r\n//                             dataframeToLowercase,\r\n//                             dataframeToParquet,\r\n//                             dataframeToUppercase,\r\n//                             dataframeUnique,\r\n//                             dataframeValueCounts,\r\n//                             dataframeWhere,\r\n//                             dataframeWithColumn,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const dateSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"date \")) {\r\n//                         const dateFormat = new vscode.CompletionItem(\r\n//                             \"format\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dateFormat.detail =\r\n//                             \"Format a given date using the given format string.\";\r\n\r\n//                         const dateHumanize = new vscode.CompletionItem(\r\n//                             \"humanize\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dateHumanize.detail =\r\n//                             \"Print a 'humanized' format for the date, relative to now.\";\r\n\r\n//                         const dateListTimezone = new vscode.CompletionItem(\r\n//                             \"list-timezone\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dateListTimezone.detail = \"List supported time zones.\";\r\n\r\n//                         const dateNow = new vscode.CompletionItem(\r\n//                             \"now\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dateNow.detail = \"Get the current date.\";\r\n\r\n//                         const dateToTable = new vscode.CompletionItem(\r\n//                             \"to-table\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dateToTable.detail = \"Print the date in a structured table.\";\r\n\r\n//                         const dateToTimezone = new vscode.CompletionItem(\r\n//                             \"to-timezone\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dateToTimezone.detail = \"Convert a date to a given time zone.\";\r\n\r\n//                         return [\r\n//                             dateFormat,\r\n//                             dateHumanize,\r\n//                             dateListTimezone,\r\n//                             dateNow,\r\n//                             dateToTable,\r\n//                             dateToTimezone,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const dropSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"drop \")) {\r\n//                         const dropColumn = new vscode.CompletionItem(\r\n//                             \"column\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         dropColumn.detail =\r\n//                             \"Remove the last number of columns. If you want to remove columns by name, try 'reject'.\";\r\n\r\n//                         return [dropColumn];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const eachSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"each \")) {\r\n//                         const eachGroup = new vscode.CompletionItem(\r\n//                             \"group\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         eachGroup.detail =\r\n//                             \"Runs a block on groups of `group_size` rows of a table at a time.\";\r\n\r\n//                         const eachWindow = new vscode.CompletionItem(\r\n//                             \"window\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         eachWindow.detail =\r\n//                             \"Runs a block on sliding windows of `window_size` rows of a table at a time.\";\r\n\r\n//                         return [eachGroup, eachWindow];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const formatSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"format \")) {\r\n//                         const formatFilesize = new vscode.CompletionItem(\r\n//                             \"filesize\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         formatFilesize.detail =\r\n//                             \"Converts a column of filesizes to some specified format\";\r\n\r\n//                         return [formatFilesize];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const fromSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"from \")) {\r\n//                         const fromBson = new vscode.CompletionItem(\r\n//                             \"bson\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromBson.detail = \"Convert from .bson binary into table\";\r\n\r\n//                         const fromCsv = new vscode.CompletionItem(\r\n//                             \"csv\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromCsv.detail = \"Parse text as .csv and create table.\";\r\n\r\n//                         const fromEml = new vscode.CompletionItem(\r\n//                             \"eml\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromEml.detail = \"Parse text as .eml and create table.\";\r\n\r\n//                         const fromIcs = new vscode.CompletionItem(\r\n//                             \"ics\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromIcs.detail = \"Parse text as .ics and create table.\";\r\n\r\n//                         const fromIni = new vscode.CompletionItem(\r\n//                             \"ini\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromIni.detail = \"Parse text as .ini and create table\";\r\n\r\n//                         const fromJson = new vscode.CompletionItem(\r\n//                             \"json\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromJson.detail = \"Parse text as .json and create table.\";\r\n\r\n//                         const fromOds = new vscode.CompletionItem(\r\n//                             \"ods\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromOds.detail =\r\n//                             \"Parse OpenDocument Spreadsheet(.ods) data and create table.\";\r\n\r\n//                         const fromSqlite = new vscode.CompletionItem(\r\n//                             \"sqlite\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromSqlite.detail = \"Convert from sqlite binary into table\";\r\n\r\n//                         const fromSsv = new vscode.CompletionItem(\r\n//                             \"ssv\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromSsv.detail =\r\n//                             \"Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.\";\r\n\r\n//                         const fromToml = new vscode.CompletionItem(\r\n//                             \"toml\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromToml.detail = \"Parse text as .toml and create table.\";\r\n\r\n//                         const fromTsv = new vscode.CompletionItem(\r\n//                             \"tsv\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromTsv.detail = \"Parse text as .tsv and create table.\";\r\n\r\n//                         const fromUrl = new vscode.CompletionItem(\r\n//                             \"url\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromUrl.detail = \"Parse url-encoded string as a table.\";\r\n\r\n//                         const fromVcf = new vscode.CompletionItem(\r\n//                             \"vcf\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromVcf.detail = \"Parse text as .vcf and create table.\";\r\n\r\n//                         const fromXlsx = new vscode.CompletionItem(\r\n//                             \"xlsx\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromXlsx.detail =\r\n//                             \"Parse binary Excel(.xlsx) data and create table.\";\r\n\r\n//                         const fromXml = new vscode.CompletionItem(\r\n//                             \"xml\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromXml.detail = \"Parse text as .xml and create table.\";\r\n\r\n//                         const fromYaml = new vscode.CompletionItem(\r\n//                             \"yaml\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromYaml.detail = \"Parse text as .yaml/.yml and create table.\";\r\n\r\n//                         const fromYml = new vscode.CompletionItem(\r\n//                             \"yml\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         fromYml.detail = \"Parse text as .yaml/.yml and create table.\";\r\n\r\n//                         return [\r\n//                             fromBson,\r\n//                             fromCsv,\r\n//                             fromEml,\r\n//                             fromIcs,\r\n//                             fromIni,\r\n//                             fromJson,\r\n//                             fromOds,\r\n//                             fromSqlite,\r\n//                             fromSsv,\r\n//                             fromToml,\r\n//                             fromTsv,\r\n//                             fromUrl,\r\n//                             fromVcf,\r\n//                             fromXlsx,\r\n//                             fromXml,\r\n//                             fromYaml,\r\n//                             fromYml,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const groupBySubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"group-by \")) {\r\n//                         const groupByDate = new vscode.CompletionItem(\r\n//                             \"date\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         groupByDate.detail = \"creates a table grouped by date.\";\r\n\r\n//                         return [groupByDate];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const hashSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"hash \")) {\r\n//                         const hashBase64 = new vscode.CompletionItem(\r\n//                             \"base64\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         hashBase64.detail = \"base64 encode or decode a value\";\r\n\r\n//                         const hashMd5 = new vscode.CompletionItem(\r\n//                             \"md5\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         hashMd5.detail = \"md5 encode a value\";\r\n\r\n//                         const hashSha256 = new vscode.CompletionItem(\r\n//                             \"sha256\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         hashSha256.detail = \"sha256 encode a value\";\r\n\r\n//                         return [hashBase64, hashMd5, hashSha256];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const intoSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"into \")) {\r\n//                         const intoBinary = new vscode.CompletionItem(\r\n//                             \"binary\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         intoBinary.detail = \"Convert value to a binary primitive\";\r\n\r\n//                         const intoInt = new vscode.CompletionItem(\r\n//                             \"int\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         intoInt.detail = \"Convert value to integer\";\r\n\r\n//                         const intoPath = new vscode.CompletionItem(\r\n//                             \"path\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         intoPath.detail = \"Convert value to filepath\";\r\n\r\n//                         const intoString = new vscode.CompletionItem(\r\n//                             \"string\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         intoString.detail = \"Convert value to string\";\r\n\r\n//                         return [intoBinary, intoInt, intoPath, intoString];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const keepSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"keep \")) {\r\n//                         const keepUntil = new vscode.CompletionItem(\r\n//                             \"until\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         keepUntil.detail = \"Keeps rows until the condition matches.\";\r\n\r\n//                         const keepWhile = new vscode.CompletionItem(\r\n//                             \"while\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         keepWhile.detail = \"Keeps rows while the condition matches.\";\r\n\r\n//                         return [keepUntil, keepWhile];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const mathSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"math \")) {\r\n//                         const mathAbs = new vscode.CompletionItem(\r\n//                             \"abs\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathAbs.detail = \"Returns absolute values of a list of numbers\";\r\n\r\n//                         const mathAvg = new vscode.CompletionItem(\r\n//                             \"avg\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathAvg.detail = \"Finds the average of a list of numbers or tables\";\r\n\r\n//                         const mathCeil = new vscode.CompletionItem(\r\n//                             \"ceil\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathCeil.detail = \"Applies the ceil function to a list of numbers\";\r\n\r\n//                         const mathEval = new vscode.CompletionItem(\r\n//                             \"eval\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathEval.detail = \"Evaluate a math expression into a number\";\r\n\r\n//                         const mathFloor = new vscode.CompletionItem(\r\n//                             \"floor\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathFloor.detail =\r\n//                             \"Applies the floor function to a list of numbers\";\r\n\r\n//                         const mathMax = new vscode.CompletionItem(\r\n//                             \"max\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathMax.detail =\r\n//                             \"Finds the maximum within a list of numbers or tables\";\r\n\r\n//                         const mathMedian = new vscode.CompletionItem(\r\n//                             \"median\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathMedian.detail = \"Gets the median of a list of numbers\";\r\n\r\n//                         const mathMin = new vscode.CompletionItem(\r\n//                             \"min\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathMin.detail =\r\n//                             \"Finds the minimum within a list of numbers or tables\";\r\n\r\n//                         const mathMode = new vscode.CompletionItem(\r\n//                             \"mode\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathMode.detail =\r\n//                             \"Gets the most frequent element(s) from a list of numbers or tables\";\r\n\r\n//                         const mathProduct = new vscode.CompletionItem(\r\n//                             \"product\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathProduct.detail =\r\n//                             \"Finds the product of a list of numbers or tables\";\r\n\r\n//                         const mathRound = new vscode.CompletionItem(\r\n//                             \"round\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathRound.detail =\r\n//                             \"Applies the round function to a list of numbers\";\r\n\r\n//                         const mathSqrt = new vscode.CompletionItem(\r\n//                             \"sqrt\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathSqrt.detail =\r\n//                             \"Applies the square root function to a list of numbers\";\r\n\r\n//                         const mathStddev = new vscode.CompletionItem(\r\n//                             \"stddev\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathStddev.detail =\r\n//                             \"Finds the stddev of a list of numbers or tables\";\r\n\r\n//                         const mathSum = new vscode.CompletionItem(\r\n//                             \"sum\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathSum.detail = \"Finds the sum of a list of numbers or tables\";\r\n\r\n//                         const mathVariance = new vscode.CompletionItem(\r\n//                             \"variance\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         mathVariance.detail =\r\n//                             \"Finds the variance of a list of numbers or tables\";\r\n\r\n//                         return [\r\n//                             mathAbs,\r\n//                             mathAvg,\r\n//                             mathCeil,\r\n//                             mathEval,\r\n//                             mathFloor,\r\n//                             mathMax,\r\n//                             mathMedian,\r\n//                             mathMin,\r\n//                             mathMode,\r\n//                             mathProduct,\r\n//                             mathRound,\r\n//                             mathSqrt,\r\n//                             mathStddev,\r\n//                             mathSum,\r\n//                             mathVariance,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const pathSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"path \")) {\r\n//                         const pathBasename = new vscode.CompletionItem(\r\n//                             \"basename\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathBasename.detail = \"Get the final component of a path\";\r\n\r\n//                         const pathDirname = new vscode.CompletionItem(\r\n//                             \"dirname\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathDirname.detail = \"Get the parent directory of a path\";\r\n\r\n//                         const pathExists = new vscode.CompletionItem(\r\n//                             \"exists\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathExists.detail = \"Check whether a path exists\";\r\n\r\n//                         const pathExpand = new vscode.CompletionItem(\r\n//                             \"expand\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathExpand.detail = \"Try to expand a path to its absolute form\";\r\n\r\n//                         const pathJoin = new vscode.CompletionItem(\r\n//                             \"join\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathJoin.detail = \"Join a structured path or a list of path parts.\";\r\n\r\n//                         const pathParse = new vscode.CompletionItem(\r\n//                             \"parse\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathParse.detail = \"Convert a path into structured data.\";\r\n\r\n//                         const pathRelativeTo = new vscode.CompletionItem(\r\n//                             \"relative-to\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathRelativeTo.detail = \"Get a path as relative to another path.\";\r\n\r\n//                         const pathSplit = new vscode.CompletionItem(\r\n//                             \"split\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathSplit.detail = \"Split a path into parts by a separator.\";\r\n\r\n//                         const pathType = new vscode.CompletionItem(\r\n//                             \"type\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathType.detail =\r\n//                             \"Get the type of the object a path refers to (e.g., file, dir, symlink)\";\r\n\r\n//                         return [\r\n//                             pathBasename,\r\n//                             pathDirname,\r\n//                             pathExists,\r\n//                             pathExpand,\r\n//                             pathJoin,\r\n//                             pathParse,\r\n//                             pathRelativeTo,\r\n//                             pathSplit,\r\n//                             pathType,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const pathvarSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"pathvar \")) {\r\n//                         const pathvarAdd = new vscode.CompletionItem(\r\n//                             \"add\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathvarAdd.detail = \"Add a filepath to the start of the pathvar\";\r\n\r\n//                         const pathvarAppend = new vscode.CompletionItem(\r\n//                             \"append\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathvarAppend.detail = \"Add a path to the end of the pathvar\";\r\n\r\n//                         const pathvarRemove = new vscode.CompletionItem(\r\n//                             \"remove\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathvarRemove.detail = \"Remove a path from the pathvar\";\r\n\r\n//                         const pathvarReset = new vscode.CompletionItem(\r\n//                             \"reset\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathvarReset.detail =\r\n//                             \"Reset the pathvar to the one specified in the config\";\r\n\r\n//                         const pathvarSave = new vscode.CompletionItem(\r\n//                             \"save\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         pathvarSave.detail = \"Save the current pathvar to the config file\";\r\n\r\n//                         return [\r\n//                             pathvarAdd,\r\n//                             pathvarAppend,\r\n//                             pathvarRemove,\r\n//                             pathvarReset,\r\n//                             pathvarSave,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const randomSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"random \")) {\r\n//                         const randomBool = new vscode.CompletionItem(\r\n//                             \"bool\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         randomBool.detail = \"Generate a random boolean value\";\r\n\r\n//                         const randomChars = new vscode.CompletionItem(\r\n//                             \"chars\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         randomChars.detail = \"Generate random chars\";\r\n\r\n//                         const randomDecimal = new vscode.CompletionItem(\r\n//                             \"decimal\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         randomDecimal.detail =\r\n//                             \"Generate a random decimal within a range [min..max]\";\r\n\r\n//                         const randomDice = new vscode.CompletionItem(\r\n//                             \"dice\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         randomDice.detail = \"Generate a random dice roll\";\r\n\r\n//                         const randomInteger = new vscode.CompletionItem(\r\n//                             \"integer\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         randomInteger.detail = \"Generate a random integer [min..max]\";\r\n\r\n//                         const randomUuid = new vscode.CompletionItem(\r\n//                             \"uuid\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         randomUuid.detail = \"Generate a random uuid4 string\";\r\n\r\n//                         return [\r\n//                             randomBool,\r\n//                             randomChars,\r\n//                             randomDecimal,\r\n//                             randomDice,\r\n//                             randomInteger,\r\n//                             randomUuid,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const rollSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"roll \")) {\r\n//                         const rollColumn = new vscode.CompletionItem(\r\n//                             \"column\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         rollColumn.detail = \"Rolls the table columns\";\r\n\r\n//                         const rollUp = new vscode.CompletionItem(\r\n//                             \"up\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         rollUp.detail = \"Rolls the table rows\";\r\n\r\n//                         return [rollColumn, rollUp];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const rotateSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"rotate \")) {\r\n//                         const rotateCounterClockwise = new vscode.CompletionItem(\r\n//                             \"counter-clockwise\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         rotateCounterClockwise.detail =\r\n//                             \"Rotates the table by 90 degrees counter clockwise.\";\r\n\r\n//                         return [rotateCounterClockwise];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const seqSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"seq \")) {\r\n//                         const seqDate = new vscode.CompletionItem(\r\n//                             \"date\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         seqDate.detail = \"print sequences of dates\";\r\n\r\n//                         return [seqDate];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const skipSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"skip \")) {\r\n//                         const skipUntil = new vscode.CompletionItem(\r\n//                             \"until\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         skipUntil.detail = \"Skips rows until the condition matches.\";\r\n\r\n//                         const skipWhile = new vscode.CompletionItem(\r\n//                             \"while\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         skipWhile.detail = \"Skips rows while the condition matches.\";\r\n\r\n//                         return [skipUntil, skipWhile];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const splitSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"split \")) {\r\n//                         const splitChars = new vscode.CompletionItem(\r\n//                             \"chars\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         splitChars.detail =\r\n//                             \"splits a string's characters into separate rows\";\r\n\r\n//                         const splitColumn = new vscode.CompletionItem(\r\n//                             \"column\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         splitColumn.detail =\r\n//                             \"splits contents across multiple columns via the separator.\";\r\n\r\n//                         const splitRow = new vscode.CompletionItem(\r\n//                             \"row\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         splitRow.detail =\r\n//                             \"splits contents over multiple rows via the separator.\";\r\n\r\n//                         return [splitChars, splitColumn, splitRow];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const strSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"str \")) {\r\n//                         const strCamelCase = new vscode.CompletionItem(\r\n//                             \"camel-case\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strCamelCase.detail = \"converts a string to camelCase\";\r\n\r\n//                         const strCapitalize = new vscode.CompletionItem(\r\n//                             \"capitalize\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strCapitalize.detail = \"capitalizes text\";\r\n\r\n//                         const strCollect = new vscode.CompletionItem(\r\n//                             \"collect\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strCollect.detail = \"collects a list of strings into a string\";\r\n\r\n//                         const strContains = new vscode.CompletionItem(\r\n//                             \"contains\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strContains.detail = \"Checks if string contains pattern\";\r\n\r\n//                         const strDowncase = new vscode.CompletionItem(\r\n//                             \"downcase\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strDowncase.detail = \"downcases text\";\r\n\r\n//                         const strEndsWith = new vscode.CompletionItem(\r\n//                             \"ends-with\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strEndsWith.detail = \"checks if string ends with pattern\";\r\n\r\n//                         const strFindReplace = new vscode.CompletionItem(\r\n//                             \"find-replace\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strFindReplace.detail = \"finds and replaces text\";\r\n\r\n//                         const strIndexOf = new vscode.CompletionItem(\r\n//                             \"index-of\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strIndexOf.detail =\r\n//                             \"Returns starting index of given pattern in string counting from 0. Returns -1 when there are no results.\";\r\n\r\n//                         const strKebabCase = new vscode.CompletionItem(\r\n//                             \"kebab-case\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strKebabCase.detail = \"converts a string to kebab-case\";\r\n\r\n//                         const strLength = new vscode.CompletionItem(\r\n//                             \"length\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strLength.detail =\r\n//                             \"outputs the lengths of the strings in the pipeline\";\r\n\r\n//                         const strLpad = new vscode.CompletionItem(\r\n//                             \"lpad\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strLpad.detail = \"pad a string with a character a certain length\";\r\n\r\n//                         const strPascalCase = new vscode.CompletionItem(\r\n//                             \"pascal-case\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strPascalCase.detail = \"converts a string to PascalCase\";\r\n\r\n//                         const strReverse = new vscode.CompletionItem(\r\n//                             \"reverse\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strReverse.detail =\r\n//                             \"outputs the reversals of the strings in the pipeline\";\r\n\r\n//                         const strRpad = new vscode.CompletionItem(\r\n//                             \"rpad\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strRpad.detail = \"pad a string with a character a certain length\";\r\n\r\n//                         const strScreamingSnakeCase = new vscode.CompletionItem(\r\n//                             \"screaming-snake-case\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strScreamingSnakeCase.detail =\r\n//                             \"converts a string to SCREAMING_SNAKE_CASE\";\r\n\r\n//                         const strSnakeCase = new vscode.CompletionItem(\r\n//                             \"snake-case\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strSnakeCase.detail = \"converts a string to snake_case\";\r\n\r\n//                         const strStartsWith = new vscode.CompletionItem(\r\n//                             \"starts-with\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strStartsWith.detail = \"checks if string starts with pattern\";\r\n\r\n//                         const strSubstring = new vscode.CompletionItem(\r\n//                             \"substring\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strSubstring.detail = \"substrings text\";\r\n\r\n//                         const strToDatetime = new vscode.CompletionItem(\r\n//                             \"to-datetime\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strToDatetime.detail = \"converts text into datetime\";\r\n\r\n//                         const strToDecimal = new vscode.CompletionItem(\r\n//                             \"to-decimal\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strToDecimal.detail = \"converts text into decimal\";\r\n\r\n//                         const strToInt = new vscode.CompletionItem(\r\n//                             \"to-int\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strToInt.detail = \"converts text into integer\";\r\n\r\n//                         const strTrim = new vscode.CompletionItem(\r\n//                             \"trim\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strTrim.detail = \"trims text\";\r\n\r\n//                         const strUpcase = new vscode.CompletionItem(\r\n//                             \"upcase\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         strUpcase.detail = \"upcases text\";\r\n\r\n//                         return [\r\n//                             strCamelCase,\r\n//                             strCapitalize,\r\n//                             strCollect,\r\n//                             strContains,\r\n//                             strDowncase,\r\n//                             strEndsWith,\r\n//                             strFindReplace,\r\n//                             strIndexOf,\r\n//                             strKebabCase,\r\n//                             strLength,\r\n//                             strLpad,\r\n//                             strPascalCase,\r\n//                             strReverse,\r\n//                             strRpad,\r\n//                             strScreamingSnakeCase,\r\n//                             strSnakeCase,\r\n//                             strStartsWith,\r\n//                             strSubstring,\r\n//                             strToDatetime,\r\n//                             strToDecimal,\r\n//                             strToInt,\r\n//                             strTrim,\r\n//                             strUpcase,\r\n//                         ];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     const toSubCommandsProvider = vscode.languages.registerCompletionItemProvider(\r\n//         \"nushell\",\r\n//         {\r\n//             provideCompletionItems(\r\n//                 document: vscode.TextDocument,\r\n//                 position: vscode.Position\r\n//             ) {\r\n//                 const linePrefix = document\r\n//                     .lineAt(position)\r\n//                     .text.substr(0, position.character);\r\n//                 if (linePrefix.endsWith(\"to \")) {\r\n//                     const toBson = new vscode.CompletionItem(\r\n//                         \"bson\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toBson.detail = \"Convert table into .bson binary\";\r\n\r\n//                     const toCsv = new vscode.CompletionItem(\r\n//                         \"csv\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toCsv.detail = \"Convert table into .csv text \";\r\n\r\n//                     const toHtml = new vscode.CompletionItem(\r\n//                         \"html\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toHtml.detail = \"Convert table into simple HTML\";\r\n\r\n//                     const toJson = new vscode.CompletionItem(\r\n//                         \"json\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toJson.detail = \"Converts table data into JSON text.\";\r\n\r\n//                     const toMd = new vscode.CompletionItem(\r\n//                         \"md\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toMd.detail = \"Convert table into simple Markdown\";\r\n\r\n//                     const toSqlite = new vscode.CompletionItem(\r\n//                         \"sqlite\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toSqlite.detail = \"Convert table into sqlite binary\";\r\n\r\n//                     const toToml = new vscode.CompletionItem(\r\n//                         \"toml\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toToml.detail = \"Convert table into .toml text\";\r\n\r\n//                     const toTsv = new vscode.CompletionItem(\r\n//                         \"tsv\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toTsv.detail = \"Convert table into .tsv text\";\r\n\r\n//                     const toUrl = new vscode.CompletionItem(\r\n//                         \"url\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toUrl.detail = \"Convert table into url-encoded text\";\r\n\r\n//                     const toXml = new vscode.CompletionItem(\r\n//                         \"xml\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toXml.detail = \"Convert table into .xml text\";\r\n\r\n//                     const toYaml = new vscode.CompletionItem(\r\n//                         \"yaml\",\r\n//                         vscode.CompletionItemKind.Method\r\n//                     );\r\n//                     toYaml.detail = \"Convert table into .yaml/.yml text\";\r\n\r\n//                     return [\r\n//                         toBson,\r\n//                         toCsv,\r\n//                         toHtml,\r\n//                         toJson,\r\n//                         toMd,\r\n//                         toSqlite,\r\n//                         toToml,\r\n//                         toTsv,\r\n//                         toUrl,\r\n//                         toXml,\r\n//                         toYaml,\r\n//                     ];\r\n//                 } else {\r\n//                     return undefined;\r\n//                 }\r\n//             },\r\n//         },\r\n//         \".\"\r\n//     );\r\n//     const urlSubCommandsProvider =\r\n//         vscode.languages.registerCompletionItemProvider(\r\n//             \"nushell\",\r\n//             {\r\n//                 provideCompletionItems(\r\n//                     document: vscode.TextDocument,\r\n//                     position: vscode.Position\r\n//                 ) {\r\n//                     const linePrefix = document\r\n//                         .lineAt(position)\r\n//                         .text.substr(0, position.character);\r\n//                     if (linePrefix.endsWith(\"url \")) {\r\n//                         const urlHost = new vscode.CompletionItem(\r\n//                             \"host\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         urlHost.detail = \"gets the host of a url\";\r\n\r\n//                         const urlPath = new vscode.CompletionItem(\r\n//                             \"path\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         urlPath.detail = \"gets the path of a url\";\r\n\r\n//                         const urlQuery = new vscode.CompletionItem(\r\n//                             \"query\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         urlQuery.detail = \"gets the query of a url\";\r\n\r\n//                         const urlScheme = new vscode.CompletionItem(\r\n//                             \"scheme\",\r\n//                             vscode.CompletionItemKind.Method\r\n//                         );\r\n//                         urlScheme.detail = \"gets the scheme (eg http, file) of a url\";\r\n\r\n//                         return [urlHost, urlPath, urlQuery, urlScheme];\r\n//                     } else {\r\n//                         return undefined;\r\n//                     }\r\n//                 },\r\n//             },\r\n//             \".\"\r\n//         );\r\n//     context.subscriptions.push(\r\n//         ansiSubCommandsProvider,\r\n//         autoenvSubCommandsProvider,\r\n//         chartSubCommandsProvider,\r\n//         configSubCommandsProvider,\r\n//         dataframeSubCommandsProvider,\r\n//         dateSubCommandsProvider,\r\n//         dropSubCommandsProvider,\r\n//         eachSubCommandsProvider,\r\n//         formatSubCommandsProvider,\r\n//         fromSubCommandsProvider,\r\n//         groupBySubCommandsProvider,\r\n//         hashSubCommandsProvider,\r\n//         intoSubCommandsProvider,\r\n//         keepSubCommandsProvider,\r\n//         mathSubCommandsProvider,\r\n//         pathSubCommandsProvider,\r\n//         pathvarSubCommandsProvider,\r\n//         randomSubCommandsProvider,\r\n//         rollSubCommandsProvider,\r\n//         rotateSubCommandsProvider,\r\n//         seqSubCommandsProvider,\r\n//         skipSubCommandsProvider,\r\n//         splitSubCommandsProvider,\r\n//         strSubCommandsProvider,\r\n//         toSubCommandsProvider,\r\n//         urlSubCommandsProvider\r\n//     );\r\n// }\r\n"],"names":["balanced","a","b","str","RegExp","maybeMatch","r","range","start","end","pre","slice","body","length","post","reg","m","match","begs","beg","left","right","result","ai","indexOf","bi","i","push","pop","module","exports","concatMap","substr","expand","split","join","escSlash","escOpen","escClose","escComma","escPeriod","escapeBraces","map","unescapeBraces","Math","random","numeric","parseInt","charCodeAt","parseCommaParts","parts","p","postParts","shift","apply","embrace","isPadded","el","test","lte","y","gte","isTop","expansions","n","isNumericSequence","isAlphaSequence","isSequence","isOptions","N","x","width","max","incr","abs","pad","some","c","String","fromCharCode","need","z","Array","j","k","expansion","xs","fn","res","isArray","Object","prototype","toString","call","realpath","sync","realpathSync","monkeypatch","fs","unmonkeypatch","origRealpath","origRealpathSync","version","process","ok","old","newError","er","syscall","code","cache","cb","pathModule","isWindows","platform","DEBUG","env","NODE_DEBUG","normalize","nextPartRe","splitRootRe","resolve","hasOwnProperty","pos","current","base","previous","original","seenLinks","knownHard","exec","lstatSync","lastIndex","resolvedLink","stat","isSymbolicLink","linkTarget","id","dev","ino","statSync","readlinkSync","callback","backtrace","Error","err","message","missingCallback","throwDeprecation","noDeprecation","msg","stack","traceDeprecation","console","trace","error","rethrow","maybeCallback","nextTick","bind","lstat","LOOP","gotResolvedLink","gotStat","gotTarget","readlink","target","ownProp","obj","field","setopts","self","pattern","options","matchBase","noglobstar","silent","strict","realpathCache","create","follow","dot","mark","nodir","nounique","nonull","nosort","nocase","noprocess","absolute","maxLength","Infinity","statCache","symlinks","ignore","ignoreMap","setupIgnores","changedCwd","cwd","path","root","replace","cwdAbs","isAbsolute","makeAbs","nomount","nonegate","nocomment","minimatch","Minimatch","finish","nou","all","l","matches","keys","forEach","literal","globSet","sort","alphasort","_mark","filter","e","notDir","isIgnored","found","isDir","slash","mabs","childrenIgnored","item","gmatcher","localeCompare","gpattern","matcher","f","charAt","glob","rp","inherits","EE","assert","globSync","common","inflight","once","TypeError","Glob","GlobSync","this","_didRealPath","set","on","_processing","_emitQueue","_processQueue","paused","done","_process","_finish","hasMagic","options_","origin","add","extend","aborted","_didRealpath","_realpath","emit","_realpathSet","next","index","matchset","_makeAbs","real","abort","pause","resume","eq","_emitMatch","pq","inGlobStar","prefix","_processSimple","read","remain","GLOBSTAR","_processGlobStar","_processReaddir","_readdir","entries","_processReaddir2","pn","negate","rawGlob","_glob","dotOk","matchedEntries","len","concat","st","_readdirInGlobStar","lstatcb","isSym","isDirectory","readdir","_readdirError","_readdirEntries","readdirCb","_processGlobStar2","remainWithoutGlobStar","gspref","noGlobStar","instead","below","_stat","exists","_processSimple2","trail","needDir","undefined","type","statcb","_stat2","arguments","newPattern","readdirSync","wrappy","reqs","args","array","key","RES","cbs","splice","makeres","util","ctor","superCtor","super_","constructor","value","enumerable","writable","configurable","TempCtor","sep","plTypes","open","close","qmark","star","reSpecials","reduce","slashSplit","ext","t","trim","regexp","comment","empty","make","braceExpand","nobrace","list","defaults","def","orig","debug","_made","parseNegate","globParts","s","si","parse","negateOffset","isSub","stateChar","re","escaping","patternListStack","negativeLists","inClass","reClassStart","classStart","patternStart","clearStateChar","noext","reStart","pl","reEnd","cs","substring","sp","SUBPARSE","tail","_","$1","$2","addPatternStart","nl","nlBefore","nlFirst","nlLast","nlAfter","openParensBefore","cleanAfter","dollar","flags","regExp","_src","makeRe","twoStar","ex","mm","partial","filename","file","matchOne","flipNegate","fi","pi","fl","hit","fr","pr","swallowee","toLowerCase","called","onceStrict","onceError","name","proto","defineProperty","Function","posix","win32","device","isUnc","Boolean","wrapper","ret","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","log","vscode","window","terminals","subscriptions","registerTerminalProfileProvider","provideTerminalProfile","token","pathsToCheck","found_nushell_path","home","homedir","cur_val","constructed_file","startsWith","existsSync","shellPath"],"sourceRoot":""}