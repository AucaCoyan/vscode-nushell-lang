{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "nushell",
    "scopeName": "source.nushell",
    "patterns": [
        { "include": "#define-variable" },
        { "include": "#define-alias" },
        { "include": "#function" },
        { "include": "#module" },
        { "include": "#use-module" },
        { "include": "#for-loop" },
        { "include": "#control-keyword" },
        { "include": "#expression" },
        { "include": "#string" },
        { "include": "#comment" }
    ],
    "repository": {
        "string": {
            "patterns": [
                { "include": "#string-single-quote" },
                { "include": "#string-backtick" },
                { "include": "#string-double-quote" },
                { "include": "#string-interpolated-double" },
                { "include": "#string-interpolated-single" },
                { "include": "#string-bare" }
            ]
        },
        "string-escape": {
            "match": "\\\\(?:[bfrnt\\'\"/]|u[0-9a-fA-F]{4})",
            "name": "constant.character.escape.nushell"
        },
        "string-bare": {
            "match": "\\w[\\w-]*",
            "name": "string.bare.nushell"
        },
        "string-single-quote": {
            "begin": "'",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "'",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.quoted.single.nushell"
        },
        "string-backtick": {
            "begin": "`",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "`",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.quoted.single.nushell"
        },
        "string-double-quote": {
            "begin": "\"",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "\"",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.quoted.double.nushell",
            "patterns": [
                {"include": "#string-escape"}
            ]
        },
        "string-interpolated-double": {
            "begin": "\\$\"",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "\"",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.interpolated.double.nushell",
            "patterns": [
                {
                    "match": "\\\\[()]",
                    "name": "constant.character.escape.nushell"
                },
                {"include": "#string-escape"},
                {"include": "#paren-expression"}
            ]
        },
        "string-interpolated-single": {
            "begin": "\\$'",
            "beginCaptures": {
				"0": { "name": "punctuation.definition.string.begin.nushell" }
			},
            "end": "'",
            "endCaptures": {
				"0": { "name": "punctuation.definition.string.end.nushell" }
			},
            "name": "string.interpolated.single.nushell",
            "patterns": [
                {"include": "#paren-expression"}
            ]
        },
        "control-keywords" : {
            "match": "\\b(?:break|continue|do|else|for|if|in|return|while|for)\\b",
            "name": "keyword.control.nushell"
        },
        "comment": {
          "match": "(#.*)$",
          "name": "comment.nushell"
        },
        "keyword": {
            "match": "(?:def(?:-env)?)",
            "name": "keyword.other.nushell"
        },
        "parameters": {
            "match": "\\b--[\\w-]*|-\\w*",
            "name":"variable.parameter.nushell"
        },
        "variables": {
            "match": "(\\$[a-zA-Z0-9_]+)(?:\\.\\w+)*",
            "captures": {
                "1": { "name": "constant.language" }
            },
            "name":"variable.name.nushell"
        },
        "command-name": {
            "match": "(\\^?)(\\w+(?:\\-+\\w+)*)",
            "captures": {
                "1": { "name": "keyword.operator.nushell" },
                "2": { "name":"source.nushell" }
            }
        },
        "numbers": {
            "match": "\\d+(?:\\.\\d*)?(?i:ns|us|ms|sec|min|hr|day|wk|b|kb|mb|gb|tb|pt|eb|zb|kib|mib|gib|tib|pit|eib|zib)?\\b",
            "name": "constant.numeric.nushell"
        },
        "binary": {
            "begin": "\\b(0x)(\\[)",
            "beginCaptures": {
                "1": { "name": "constant.numeric.nushell" },
                "2": { "name": "meta.brace.square.begin.nushell" }
            },
            "end": "\\]",
            "endCaptures": {
                "0": { "name": "meta.brace.square.begin.nushell" }
            },
            "name": "constant.binary.nushell",
            "patterns": [
                { "match": "[0-9a-fA-F]{2}", "name": "constant.numeric.nushell" }
            ]
        },
        "table": {
            "begin": "\\[",
            "beginCaptures": {
                "0": { "name": "meta.brace.square.begin.nushell" }
            },
            "end": "\\]",
            "endCaptures": {
                "0": { "name": "meta.brace.square.end.nushell" }
            },
            "name": "meta.table.nushell",
            "patterns": [
                { "include": "#inline-expression" },
                {
                    "match": ",",
                    "name": "punctuation.separator.nushell"
                }
            ]
        },
        "record": {
            "begin": "\\{",
            "beginCaptures": {
                "0": { "name": "punctuation.definition.record.begin.nushell" }
            },
            "while": "(?=(?:\\w+|\"[\\w ]+\")(?:\\.(?:\\w+|\"[\\w ]+\"))*\\s*:)",
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.definition.record.end.nushell" }
            },
            "name": "meta.record.nushell",
            "patterns": [
                { 
                    "begin": "((?:\\w+|\"[\\w ]+\")(?:\\.(?:\\w+|\"[\\w ]+\"))*)\\s*:",
                    "beginCaptures": {
                        "1": { "name": "variable.other.nushell" }
                    },
                    "end": "(?=(,)|(?=\\}|((?:\\w+|\"[\\w ]+\"))\\s*:))",
                    "endCaptures": {
                        "1": { "name": "punctuation.separator.nushell" }
                    },
                    "patterns": [
                        { "include": "#inline-expression" }
                    ]
                }
            ]
        },
        "function-parameter": {
            "match": "(-{0,2}[\\w-]+)(?:\\s*:\\s*(\\w+))?(?:\\s*=\\s*(.+))?",
            "captures": {
                "1": { "name": "variable.parameter.nushell" },
                "2": { "name": "storage.type.nushell" },
                "3": { "patterns": [{"include": "#inline-expression"}] }
            }
        },
        "function": {
            "begin": "((?:export\\s+)?def(?:-env)?)\\s+([\\w\\-]+|\"[\\w\\- ]+\")\\s*\\[(.*)\\]\\s*\\{",
            "beginCaptures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "entity.name.function.nushell" },
                "3":{ "patterns": [{"include": "#function-parameter"}] }
            },
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.definition.function.end.nushell" }
            },
            "name": "meta.function.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "module": {
            "begin": "(module)\\s+([\\w\\-]+)\\s*\\{",
            "beginCaptures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "entity.name.namespace.nushell" }
            },
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.definition.module.end.nushell" }
            },
            "name": "meta.module.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "use-module": {
            "match": "(use)\\s+([\\w\\-]+)(?:\\s+([\\w\\-]+|\"[\\w\\- ]+\"))?",
            "captures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "entity.name.namespace.nushell" },
                "3": { "name": "entity.name.function.nushell" }
            }
        },
        "for-loop": {
            "begin": "(for)\\s+(\\$?\\w+)\\s+(in)\\s+(.+)\\s*(\\{)",
            "beginCaptures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "variable.other.nushell" },
                "3": { "name": "keyword.other.nushell" },
                "4": { "patterns": [{"include": "#inline-expression"}] },
                "5": { "name": "punctuation.section.block.begin.bracket.curly.nushell" }
            },
            "end": "\\}",
            "endCaptures": {
                "0": { "name": "punctuation.section.block.end.bracket.curly.nushell" }
            },
            "name": "meta.for-loop.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "paren-expression": {
            "begin": "\\(",
            "beginCaptures": {
				"0": { "name": "meta.brace.round.begin.nushell" }
			},
            "end": "\\)",
            "endCaptures": {
				"0": { "name": "meta.brace.round.end.nushell" }
			},
            "name": "meta.expression.braced.nushell",
            "patterns": [
                { "include": "#expression" }
            ]
        },
        "braced-expression": {
            "begin": "(\\{)(?:\\|(.*)\\|)?",
            "beginCaptures": {
				"1": { "name": "punctuation.section.block.begin.bracket.curly.nushell" },
                "2": { 
                    "patterns": [
                        { "include": "#function-parameter" },
                        {
                            "match": ",",
                            "name": "punctuation.separator.nushell"
                        }
                    ]
                 }
			},
            "end": "\\}",
            "endCaptures": {
				"0": { "name": "punctuation.section.block.end.bracket.curly.nushell" }
			},
            "name": "meta.expression.braced.nushell",
            "patterns": [
                { "include": "source.nushell" }
            ]
        },
        "define-variable": {
            "match": "(let(?:-env)?|mut|const)\\s+(\\w+)\\s*(=)",
            "captures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "variable.other.nushell" },
                "3": { "name": "keyword.operator.nushell" }
            }
        },
        "define-alias": {
            "match": "((?:export\\s+)?alias)\\s+(\\w+)\\s*(=)",
            "captures": {
                "1": { "name": "keyword.other.nushell" },
                "2": { "name": "entity.name.function" },
                "3": { "name": "keyword.operator.nushell" }
            }
        },
        "command": {
            "begin": "(?:(\\^)|(?![0-9]))(\\w+(?:\\-+\\w+)*)",
            "beginCaptures": {
                "1": { "name": "keyword.operator.nushell" },
                "2": { 
                    "patterns": [
                        { "include": "#control-keywords" },
                        { 
                            "match": ".+",
                            "name": "entity.name.function.nushell"
                        }
                    ]
                    
                }
            },
            "end": "(?=\\||\\)|\\}|;)|$",
            "name": "meta.expression.nushell",
            "patterns": [
                { "include": "#inline-expression" }
            ]
        },
        "expression": {
            "patterns": [
                { "include": "#command" },
                { "include": "#inline-expression" }
            ]
        },
        "inline-expression": {
            "patterns": [
                { "include": "#parameters" },
                { "include": "#variables" },
                { "include": "#numbers" },
                { "include": "#binary" },
                { "include": "#table" },
                { "include": "#record" },
                { "include": "#string" },
                { "include": "#paren-expression" },
                { "include": "#braced-expression" }
            ]
        }
    }
}