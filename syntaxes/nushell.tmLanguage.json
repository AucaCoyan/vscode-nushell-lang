{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "nushell",
  "scopeName": "source.nushell",
  "patterns":
  [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#range"
    },
    {
      "include": "#parameter"
    },
    {
      "include": "#digit"
    },
    {
      "include": "#blockparam"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#function"
    },
    {
      "include": "#type"
    }
  ],
  "repository":
  {
    "keywords":
    {
      "patterns":
      [
        {
          "name": "keyword.other.u_sub",
          "match": "\\bupdate(\\scells)\\b"
        },
        {
          "name": "keyword.other.u_sub",
          "match": "\\burl(\\shost|\\spath|\\squery|\\sscheme)\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\btake(\\suntil|\\swhile)\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\bterm(\\ssize)\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\bto(\\scsv|\\shtml|\\sjson|\\smd|\\snuon|\\sparquet|\\stext|\\stoml|\\stsv|\\surl|\\sxml|\\syaml)\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bseq(\\schar|\\sdate)\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bskip(\\suntil|\\swhile)\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bsplit(\\schars|\\scolumn|\\slist|\\srow|\\swords)\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bstr(\\scamel-case|\\scapitalize|\\scollect|\\scontains|\\sdistance|\\sdowncase|\\sends-with|\\sfind-replace|\\sindex-of|\\skebab-case|\\slength|\\slpad|\\spascal-case|\\sreplace|\\sreverse|\\srpad|\\sscreaming-snake-case|\\ssnake-case|\\sstarts-with|\\ssubstring|\\stitle-case|\\sto-datetime|\\sto-decimal|\\sto-int|\\strim|\\supcase)\\b"
        },
        {
          "name": "keyword.other.r_sub",
          "match": "\\brandom(\\sbool|\\schars|\\sdecimal|\\sdice|\\sinteger|\\suuid)\\b"
        },
        {
          "name": "keyword.other.r_sub",
          "match": "\\broll(\\sdown|\\sleft|\\sright|\\sup)\\b"
        },
        {
          "name": "keyword.other.q_sub",
          "match": "\\bquery(\\sdb|\\sjson|\\sweb|\\sxml)\\b"
        },
        {
          "name": "keyword.other.p_sub",
          "match": "\\bpath(\\sbasename|\\sdirname|\\sexists|\\sexpand|\\sjoin|\\sparse|\\srelative-to|\\ssplit|\\stype)\\b"
        },
        {
          "name": "keyword.other.o_sub",
          "match": "\\boverlay(\\shide|\\slist|\\snew|\\suse)\\b"
        },
        {
          "name": "keyword.other.m_sub",
          "match": "\\bmath(\\sabs|\\savg|\\sceil|\\seval|\\sfloor|\\smax|\\smedian|\\smin|\\smode|\\sproduct|\\sround|\\ssqrt|\\sstddev|\\ssum|\\svariance)\\b"
        },
        {
          "name": "keyword.other.k_sub",
          "match": "\\bkeybindings(\\sdefault|\\slist|\\slisten)\\b"
        },
        {
          "name": "keyword.other.i_sub",
          "match": "\\binto(\\sbinary|\\sbool|\\sdatetime|\\sdb|\\sdecimal|\\sdf|\\sduration|\\sfilesize|\\sint|\\slazy|\\snu|\\ssqlite|\\sstring)\\b"
        },
        {
          "name": "keyword.other.h_sub",
          "match": "\\bhash(\\sbase64|\\smd5|\\ssha256)\\b"
        },
        {
          "name": "keyword.other.f_sub",
          "match": "\\bformat(\\sfilesize)\\b"
        },
        {
          "name": "keyword.other.f_sub",
          "match": "\\bfrom(\\scsv|\\seml|\\sics|\\sini|\\sjson|\\snuon|\\sods|\\sssv|\\stable|\\stoml|\\stsv|\\surl|\\svcf|\\sxlsx|\\sxml|\\syaml|\\syml)\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\beach(\\swhile)\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\bencode(\\sbase64)\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\berror(\\smake)\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\bexport(\\salias|\\sdef|\\sdef-env|\\senv|\\sextern|\\suse)\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdate(\\sformat|\\shumanize|\\slist-timezone|\\snow|\\sto-record|\\sto-table|\\sto-timezone)\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdecode(\\sbase64)\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdetect(\\scolumns)\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdrop(\\scolumn|\\snth)\\b"
        },
        {
          "name": "keyword.other.c_sub",
          "match": "\\bconfig(\\senv|\\snu|\\sreset)\\b"
        },
        {
          "name": "keyword.other.b_sub",
          "match": "\\bbits(\\sand|\\snot|\\sor|\\srol|\\sror|\\sshl|\\sshr|\\sxor)\\b"
        },
        {
          "name": "keyword.other.b_sub",
          "match": "\\bbytes(\\sadd|\\sat|\\sbuild|\\scollect|\\sends-with|\\sindex-of|\\slength|\\sremove|\\sreplace|\\sreverse|\\sstarts-with)\\b"
        },
        {
          "name": "keyword.other.a_sub",
          "match": "\\bansi(\\sgradient|\\sstrip)\\b"
        }
      ]
    },
    "strings":
    {
      "name": "string.quoted.double.nushell",
      "begin": "\"|'|`",
      "end": "\"|'|`"
    },
    "variable":
    {
      "match": "(alias|let|let-env)\\s+[\\$'\"]?([a-z A-Z0-9_-]+)['\"]?|(\\$[a-zA-Z0-9_\\-]+)|(\\|)([$a-zA-Z0-9-]+)[\\s,]+([$a-zA-Z0-9-]+)(\\|)",
      "name": "variable.nushell",
      "captures":
      {
        "1":
        {
          "name": "keyword.other.nushell"
        },
        "2":
        {
          "name": "variable.name.nushell"
        },
        "3":
        {
          "name": "variable.name.nushell"
        },
        "4":
        {
          "name": "punctuation.nushell"
        },
        "5":
        {
          "name": "variable.name.nushell"
        },
        "6":
        {
          "name": "variable.name.nushell"
        },
        "7":
        {
          "name": "punctuation.nushell"
        }
      }
    },
    "punctuation":
    {
      "patterns":
      [
        {
          "comment": "comma",
          "name": "punctuation.comma.nushell",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.nushell",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.nushell",
          "match": "[()]"
        },
        {
          "comment": "semicolon",
          "name": "punctuation.semi.nushell",
          "match": ";"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.nushell",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.nushell",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "comment":
    {
      "match": "(#.*)",
      "name": "comment.nushell"
    },
    "range":
    {
      "match": "(\\d+\\.\\.\\d+)",
      "name": "constant.nushell"
    },
    "digit":
    {
      "match": "(\\b[0-9]+\\b)",
      "name": "constant.numeric.nushell"
    },
    "parameter":
    {
      "match": "(\\s-[a-zA-Z_\\-]|--[a-zA-Z_\\-]{1,50})",
      "name": "variable.parameter.function.nushell"
    },
    "blockparam":
    {
      "match": "(\\|)([a-zA-Z0-9\\-\\_]+)(\\|)",
      "name": "variable.nushell",
      "captures":
      {
        "2":
        {
          "name": "variable.language.nushell"
        }
      }
    },
    "function":
    {
      "match": "\\b(def|def-env|extern)\\s+([\"'a-zA-Z0-9_\\- ]{1,})",
      "name": "entity.name",
      "captures":
      {
        "1":
        {
          "name": "entity.name.function.nushell"
        },
        "2":
        {
          "name": "entity.name.type.nushell"
        }
      }
    },
    "type":
    {
      "match": "([a-zA-Z0-9\\-_ ]+)(\\:[A-Za-z0-9\\-_ ]{1,})",
      "name": "storage",
      "captures":
      {
        "1":
        {
          "name": "storage.modifier.nushell"
        },
        "2":
        {
          "name": "storage.type.nushell"
        }
      }
    }
  }
}