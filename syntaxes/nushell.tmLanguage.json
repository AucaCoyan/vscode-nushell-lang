{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "nushell",
  "scopeName": "source.nushell",
  "patterns":
  [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#range"
    },
    {
      "include": "#parameter"
    },
    {
      "include": "#digit"
    },
    {
      "include": "#blockparam"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#function"
    },
    {
      "include": "#type"
    }
  ],
  "repository":
  {
    "keywords":
    {
      "patterns":
      [
        {
          "name": "keyword.other.a",
          "match": "\\b(alias|all?|ansi|any?|append)\\b"
        },
        {
          "name": "keyword.other.a_sub",
          "match": "\\b(ansi\\sgradient|ansi\\sstrip)\\b"
        },
        {
          "name": "keyword.other.b",
          "match": "\\b(benchmark|build-string)\\b"
        },
        {
          "name": "keyword.other.c",
          "match": "\\b(cal|cd|char|clear|collect|columns|compact|complete|config|cp)\\b"
        },
        {
          "name": "keyword.other.c_sub",
          "match": "\\b(config\\senv|config\\snu)\\b"
        },
        {
          "name": "keyword.other.d",
          "match": "\\b(dataframe|date|debug|decode|def|def-env|default|describe|do|drop|du)\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\b(date\\sformat|date\\shumanize|date\\slist-timezone|date\\snow|date\\sto-record|date\\sto-table|date\\sto-timezone|detect\\scolumns|drop\\scolumn|drop\\snth)\\b"
        },
        {
          "name": "keyword.other.db_sub",
          "match": "\\b(db|db\\sand|db\\sas|db\\scol|db\\scollect|db\\sdescribe|db\\sfn|db\\sfrom|db\\sgroup-by|db\\sjoin|db\\slimit|db\\sopen|db\\sor|db\\sorder-by|db\\sover|db\\squery|db\\sschema|db\\sselect|db\\stesting|db\\swhere)\\b"
        },
        {
          "name": "keyword.other.dfr_sub",
          "match": "\\b(dfr|dfr\\sagg-groups|dfr\\saggregate|dfr\\sall-false|dfr\\sall-true|dfr\\sappend|dfr\\sarg-max|dfr\\sarg-min|dfr\\sarg-sort|dfr\\sarg-true|dfr\\sarg-unique|dfr\\sas|dfr\\sas-date|dfr\\sas-datetime|dfr\\scache|dfr\\scol|dfr\\scollect|dfr\\scolumn|dfr\\sconcatenate|dfr\\scontains|dfr\\scount-null|dfr\\scount-unique|dfr\\scumulative|dfr\\sdescribe|dfr\\sdrop|dfr\\sdrop-duplicates|dfr\\sdrop-nulls|dfr\\sdtypes|dfr\\sexplode|dfr\\sfetch|dfr\\sfill-na|dfr\\sfill-null|dfr\\sfilter-with|dfr\\sfirst|dfr\\sflatten|dfr\\sget|dfr\\sget-day|dfr\\sget-hour|dfr\\sget-minute|dfr\\sget-month|dfr\\sget-nanosecond|dfr\\sget-ordinal|dfr\\sget-second|dfr\\sget-week|dfr\\sget-weekday|dfr\\sget-year|dfr\\sgroup-by|dfr\\sis-duplicated|dfr\\sis-in|dfr\\sis-not-null|dfr\\sis-null|dfr\\sis-unique|dfr\\sjoin|dfr\\slast|dfr\\slist|dfr\\slit|dfr\\sls|dfr\\smax|dfr\\smean|dfr\\smedian|dfr\\smelt|dfr\\smin|dfr\\snot|dfr\\sopen|dfr\\squantile|dfr\\srename|dfr\\srename-col|dfr\\sreplace|dfr\\sreplace-all|dfr\\sreverse|dfr\\srolling|dfr\\ssample|dfr\\sselect|dfr\\sset|dfr\\sset-with-idx|dfr\\sshape|dfr\\sshift|dfr\\sslice|dfr\\ssort|dfr\\ssort-by|dfr\\sstd|dfr\\sstr-lengths|dfr\\sstr-slice|dfr\\sstrftime|dfr\\ssum|dfr\\stake|dfr\\sto-csv|dfr\\sto-df|dfr\\sto-dummies|dfr\\sto-lazy|dfr\\sto-lowercase|dfr\\sto-nu|dfr\\sto-parquet|dfr\\sto-uppercase|dfr\\sunique|dfr\\svalue-counts|dfr\\svar|dfr\\swhen|dfr\\swith-column)\\b"
        },
        {
          "name": "keyword.other.e",
          "match": "\\b(each|echo|empty?|enter|env|every|exec|exit|export|extern)\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\b(error\\smake|export\\salias|export\\sdef|export\\sdef-env|export\\senv|export\\sextern)\\b"
        },
        {
          "name": "keyword.other.f",
          "match": "\\b(fetch|find|first|flatten|fmt|for|format|from)\\b"
        },
        {
          "name": "keyword.other.f_sub",
          "match": "\\b(format\\sfilesize|from\\scsv|from\\seml|from\\sics|from\\sini|from\\sjson|from\\snuon|from\\sods|from\\sssv|from\\stoml|from\\stsv|from\\surl|from\\svcf|from\\sxlsx|from\\sxml|from\\syaml|from\\syml)\\b"
        },
        {
          "name": "keyword.other.g",
          "match": "\\b(g|get|glob|grid|group|group-by|gstat)\\b"
        },
        {
          "name": "keyword.other.h",
          "match": "\\b(hash|headers|help|hide|histogram|history)\\b"
        },
        {
          "name": "keyword.other.h_sub",
          "match": "\\b(hash\\sbase64|hash\\smd5|hash\\ssha256)\\b"
        },
        {
          "name": "keyword.other.i",
          "match": "\\b(if|ignore|inc|input|insert|into)\\b"
        },
        {
          "name": "keyword.other.i_sub",
          "match": "\\b(into\\sbinary|into\\sbool|into\\sdatetime|into\\sdecimal|into\\sduration|into\\sfilesize|into\\sint|into\\sstring)\\b"
        },
        {
          "name": "keyword.other.k",
          "match": "\\b(keep|keybindings|kill)\\b"
        },
        {
          "name": "keyword.other.k_sub",
          "match": "\\b(keep\\suntil|keep\\swhile|keybindings\\sdefault|keybindings\\slist|keybindings\\slisten)\\b"
        },
        {
          "name": "keyword.other.l",
          "match": "\\b(last|length|let|let-env|lines|load-env|ls)\\b"
        },
        {
          "name": "keyword.other.m",
          "match": "\\b(match|math|merge|metadata|mkdir|module|move|mv)\\b"
        },
        {
          "name": "keyword.other.m_sub",
          "match": "\\b(math\\sabs|math\\savg|math\\sceil|math\\seval|math\\sfloor|math\\smax|math\\smedian|math\\smin|math\\smode|math\\sproduct|math\\sround|math\\ssqrt|math\\sstddev|math\\ssum|math\\svariance)\\b"
        },
        {
          "name": "keyword.other.n",
          "match": "\\b(n|nth|nu-highlight)\\b"
        },
        {
          "name": "keyword.other.o",
          "match": "\\b(open|overlay)\\b"
        },
        {
          "name": "keyword.other.o_sub",
          "match": "\\b(overlay\\sadd|overlay\\slist|overlay\\sremove)\\b"
        },
        {
          "name": "keyword.other.p",
          "match": "\\b(p|par-each|parse|path|pivot|post|prepend|print|ps)\\b"
        },
        {
          "name": "keyword.other.p_sub",
          "match": "\\b(path\\sbasename|path\\sdirname|path\\sexists|path\\sexpand|path\\sjoin|path\\sparse|path\\srelative-to|path\\ssplit|path\\stype)\\b"
        },
        {
          "name": "keyword.other.q",
          "match": "\\b(query)\\b"
        },
        {
          "name": "keyword.other.q_sub",
          "match": "\\b(query\\sjson|query\\sweb|query\\sxml)\\b"
        },
        {
          "name": "keyword.other.r",
          "match": "\\b(random|range|reduce|register|reject|rename|reverse|rm|roll|rotate|run-external)\\b"
        },
        {
          "name": "keyword.other.r_sub",
          "match": "\\b(random\\sbool|random\\schars|random\\sdecimal|random\\sdice|random\\sinteger|random\\suuid|roll\\sdown|roll\\sleft|roll\\sright|roll\\sup)\\b"
        },
        {
          "name": "keyword.other.s",
          "match": "\\b(save|select|seq|shells|shuffle|size|skip|sleep|sort|sort-by|source|split|split-by|str|sys)\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\b(seq\\schar|seq\\sdate|skip\\suntil|skip\\swhile|split\\schars|split\\scolumn|split\\srow|str\\scamel-case|str\\scapitalize|str\\scollect|str\\scontains|str\\sdowncase|str\\sends-with|str\\sfind-replace|str\\sindex-of|str\\skebab-case|str\\slength|str\\slpad|str\\spascal-case|str\\sreplace|str\\sreverse|str\\srpad|str\\sscreaming-snake-case|str\\ssnake-case|str\\sstarts-with|str\\ssubstring|str\\stitle-case|str\\sto-datetime|str\\sto-decimal|str\\sto-int|str\\strim|str\\supcase)\\b"
        },
        {
          "name": "keyword.other.t",
          "match": "\\b(table|take|to|touch|transpose|tutor)\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\b(take\\suntil|take\\swhile|term\\ssize|to\\scsv|to\\shtml|to\\sjson|to\\smd|to\\snuon|to\\stext|to\\stoml|to\\stsv|to\\surl|to\\sxml|to\\syaml)\\b"
        },
        {
          "name": "keyword.other.u",
          "match": "\\b(unalias|uniq|update|upsert|url|use)\\b"
        },
        {
          "name": "keyword.other.u_sub",
          "match": "\\b(update\\scells|url\\shost|url\\spath|url\\squery|url\\sscheme)\\b"
        },
        {
          "name": "keyword.other.v",
          "match": "\\b(version|view-source)\\b"
        },
        {
          "name": "keyword.other.w",
          "match": "\\b(watch|where|which|window|with-env|wrap)\\b"
        },
        {
          "name": "keyword.other.z",
          "match": "\\b(zip)\\b"
        }
      ]
    },
    "strings":
    {
      "name": "string.quoted.double.nushell",
      "begin": "\"|'|`",
      "end": "\"|'|`"
    },
    "variable":
    {
      "match": "(alias|let|let-env)\\s+[\\$'\"]?([a-z A-Z0-9_-]+)['\"]?|(\\$[a-zA-Z0-9_\\-]+)|(\\|)([$a-zA-Z0-9-]+)[\\s,]+([$a-zA-Z0-9-]+)(\\|)",
      "name": "variable.nushell",
      "captures":
      {
        "1":
        {
          "name": "keyword.other.nushell"
        },
        "2":
        {
          "name": "variable.name.nushell"
        },
        "3":
        {
          "name": "variable.name.nushell"
        },
        "4":
        {
          "name": "punctuation.nushell"
        },
        "5":
        {
          "name": "variable.name.nushell"
        },
        "6":
        {
          "name": "variable.name.nushell"
        },
        "7":
        {
          "name": "punctuation.nushell"
        }
      }
    },
    "punctuation":
    {
      "patterns":
      [
        {
          "comment": "comma",
          "name": "punctuation.comma.nushell",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.nushell",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.nushell",
          "match": "[()]"
        },
        {
          "comment": "semicolon",
          "name": "punctuation.semi.nushell",
          "match": ";"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.nushell",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.nushell",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "comment":
    {
      "match": "(#.*)",
      "name": "comment.nushell"
    },
    "range":
    {
      "match": "(\\d+\\.\\.\\d+)",
      "name": "constant.nushell"
    },
    "digit":
    {
      "match": "(\\b[0-9]+\\b)",
      "name": "constant.numeric.nushell"
    },
    "parameter":
    {
      "match": "(\\s-[a-zA-Z_\\-]|--[a-zA-Z_\\-]{1,50})",
      "name": "variable.parameter.function.nushell"
    },
    "blockparam":
    {
      "match": "(\\|)([a-zA-Z0-9\\-\\_]+)(\\|)",
      "name": "variable.nushell",
      "captures":
      {
        "2":
        {
          "name": "variable.language.nushell"
        }
      }
    },
    "function":
    {
      "match": "\\b(def|def-env|extern)\\s+([\"'a-zA-Z0-9_\\- ]{1,})",
      "name": "entity.name",
      "captures":
      {
        "1":
        {
          "name": "entity.name.function.nushell"
        },
        "2":
        {
          "name": "entity.name.type.nushell"
        }
      }
    },
    "type":
    {
      "match": "([a-zA-Z0-9\\-_ ]+)(\\:[A-Za-z0-9\\-_ ]{1,})",
      "name": "storage",
      "captures":
      {
        "1":
        {
          "name": "storage.modifier.nushell"
        },
        "2":
        {
          "name": "storage.type.nushell"
        }
      }
    }
  }
}