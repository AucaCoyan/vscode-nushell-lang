{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "nushell",
  "scopeName": "source.nushell",
  "patterns":
  [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#range"
    },
    {
      "include": "#parameter"
    },
    {
      "include": "#digit"
    },
    {
      "include": "#blockparam"
    },
    {
      "include": "#variable"
    },
    {
      "include": "#function"
    },
    {
      "include": "#type"
    }
  ],
  "repository":
  {
    "keywords":
    {
      "patterns":
      [
        {
          "name": "keyword.other.a",
          "match": "\\b(agg|agg-groups|alias|all-false|all-true|all\\?|ansi|any\\?|append|arg-max|arg-min|arg-sort|arg-true|arg-unique|as|as-date|as-datetime)\\b"
        },
        {
          "name": "keyword.other.a_sub",
          "match": "\\bansi(\\sgradient|\\sstrip)?\\b"
        },
        {
          "name": "keyword.other.b",
          "match": "\\b(benchmark|build-string)\\b"
        },
        {
          "name": "keyword.other.c",
          "match": "\\b(cache|cal|cd|char|clear|col|collect|columns|compact|complete|concatenate|config|contains|count|count-null|cp|cumulative)\\b"
        },
        {
          "name": "keyword.other.c_sub",
          "match": "\\bconfig(\\senv|\\snu)?\\b"
        },
        {
          "name": "keyword.other.d",
          "match": "\\b(date|db|debug|decode|def|def-env|default|describe|df-not|do|drop|drop-duplicates|drop-nulls|dtypes|du)\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdate(\\sformat|\\shumanize|\\slist-timezone|\\snow|\\sto-record|\\sto-table|\\sto-timezone)?\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdb(\\sand|\\sas|\\scol|\\scollect|\\sdescribe|\\sfn|\\sfrom|\\sgroup-by|\\sjoin|\\slimit|\\sopen|\\sor|\\sorder-by|\\sover|\\squery|\\sschema|\\sselect|\\stesting|\\swhere)?\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\bdrop(\\scolumn|\\snth)?\\b"
        },
        {
          "name": "keyword.other.d_sub",
          "match": "\\b(detect)\\b"
        },
        {
          "name": "keyword.other.e",
          "match": "\\b(each|echo|empty\\?|enter|env|every|exec|exit|explode|export|expr-not|extern)\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\bexport(\\salias|\\sdef|\\sdef-env|\\senv|\\sextern)?\\b"
        },
        {
          "name": "keyword.other.e_sub",
          "match": "\\b(each|error)\\b"
        },
        {
          "name": "keyword.other.f",
          "match": "\\b(fetch|fill-na|fill-null|filter-with|find|first|flatten|fmt|for|format|from)\\b"
        },
        {
          "name": "keyword.other.f_sub",
          "match": "\\bfrom(\\scsv|\\seml|\\sics|\\sini|\\sjson|\\snuon|\\sods|\\sssv|\\stoml|\\stsv|\\surl|\\svcf|\\sxlsx|\\sxml|\\syaml|\\syml)?\\b"
        },
        {
          "name": "keyword.other.f_sub",
          "match": "\\b(format)\\b"
        },
        {
          "name": "keyword.other.g",
          "match": "\\b(g|get|get-day|get-hour|get-minute|get-month|get-nanosecond|get-ordinal|get-second|get-week|get-weekday|get-year|glob|grid|group|group-by|gstat)\\b"
        },
        {
          "name": "keyword.other.h",
          "match": "\\b(hash|headers|help|hide|histogram|history)\\b"
        },
        {
          "name": "keyword.other.h_sub",
          "match": "\\bhash(\\sbase64|\\smd5|\\ssha256)?\\b"
        },
        {
          "name": "keyword.other.i",
          "match": "\\b(if|ignore|inc|input|insert|into|is-admin|is-duplicated|is-in|is-not-null|is-null|is-unique)\\b"
        },
        {
          "name": "keyword.other.i_sub",
          "match": "\\binto(\\sbinary|\\sbool|\\sdatetime|\\sdecimal|\\sduration|\\sfilesize|\\sint|\\sstring)?\\b"
        },
        {
          "name": "keyword.other.j",
          "match": "\\b(join)\\b"
        },
        {
          "name": "keyword.other.k",
          "match": "\\b(keep|keybindings|kill)\\b"
        },
        {
          "name": "keyword.other.k_sub",
          "match": "\\bkeep(\\suntil|\\swhile)?\\b"
        },
        {
          "name": "keyword.other.k_sub",
          "match": "\\bkeybindings(\\sdefault|\\slist|\\slisten)?\\b"
        },
        {
          "name": "keyword.other.l",
          "match": "\\b(last|length|let|let-env|lines|list|lit|load-env|ls|ls-df)\\b"
        },
        {
          "name": "keyword.other.m",
          "match": "\\b(match|math|max|mean|median|melt|merge|metadata|min|mkdir|module|move|mv)\\b"
        },
        {
          "name": "keyword.other.m_sub",
          "match": "\\bmath(\\sabs|\\savg|\\sceil|\\seval|\\sfloor|\\smax|\\smedian|\\smin|\\smode|\\sproduct|\\sround|\\ssqrt|\\sstddev|\\ssum|\\svariance)?\\b"
        },
        {
          "name": "keyword.other.n",
          "match": "\\b(n|n-unique|nth|nu-highlight)\\b"
        },
        {
          "name": "keyword.other.o",
          "match": "\\b(open|open-df|otherwise|overlay)\\b"
        },
        {
          "name": "keyword.other.o_sub",
          "match": "\\boverlay(\\sadd|\\slist|\\snew|\\sremove)?\\b"
        },
        {
          "name": "keyword.other.p",
          "match": "\\b(p|par-each|parse|path|pivot|post|prepend|print|ps)\\b"
        },
        {
          "name": "keyword.other.p_sub",
          "match": "\\bpath(\\sbasename|\\sdirname|\\sexists|\\sexpand|\\sjoin|\\sparse|\\srelative-to|\\ssplit|\\stype)?\\b"
        },
        {
          "name": "keyword.other.q",
          "match": "\\b(quantile|query)\\b"
        },
        {
          "name": "keyword.other.q_sub",
          "match": "\\bquery(\\sjson|\\sweb|\\sxml)?\\b"
        },
        {
          "name": "keyword.other.r",
          "match": "\\b(random|range|reduce|register|reject|rename|replace|replace-all|reverse|rm|roll|rolling|rotate|run-external)\\b"
        },
        {
          "name": "keyword.other.r_sub",
          "match": "\\brandom(\\sbool|\\schars|\\sdecimal|\\sdice|\\sinteger|\\suuid)?\\b"
        },
        {
          "name": "keyword.other.r_sub",
          "match": "\\broll(\\sdown|\\sleft|\\sright|\\sup)?\\b"
        },
        {
          "name": "keyword.other.s",
          "match": "\\b(sample|save|select|seq|set|set-with-idx|shape|shells|shift|shuffle|size|skip|sleep|slice|sort|sort-by|source|split|split-by|std|str|str-lengths|str-slice|strftime|sum|sys)\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bseq(\\schar|\\sdate)?\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bskip(\\suntil|\\swhile)?\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bsplit(\\schars|\\scolumn|\\srow)?\\b"
        },
        {
          "name": "keyword.other.s_sub",
          "match": "\\bstr(\\scamel-case|\\scapitalize|\\scollect|\\scontains|\\sdowncase|\\sends-with|\\sfind-replace|\\sindex-of|\\skebab-case|\\slength|\\slpad|\\spascal-case|\\sreplace|\\sreverse|\\srpad|\\sscreaming-snake-case|\\ssnake-case|\\sstarts-with|\\ssubstring|\\stitle-case|\\sto-datetime|\\sto-decimal|\\sto-int|\\strim|\\supcase)?\\b"
        },
        {
          "name": "keyword.other.t",
          "match": "\\b(table|take|to|to-csv|to-df|to-dummies|to-lazy|to-lowercase|to-nu|to-parquet|to-uppercase|touch|transpose|tutor)\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\btake(\\suntil|\\swhile)?\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\bto(\\scsv|\\shtml|\\sjson|\\smd|\\snuon|\\stext|\\stoml|\\stsv|\\surl|\\sxml|\\syaml)?\\b"
        },
        {
          "name": "keyword.other.t_sub",
          "match": "\\b(term)\\b"
        },
        {
          "name": "keyword.other.u",
          "match": "\\b(unalias|uniq|unique|update|upsert|url|use)\\b"
        },
        {
          "name": "keyword.other.u_sub",
          "match": "\\burl(\\shost|\\spath|\\squery|\\sscheme)?\\b"
        },
        {
          "name": "keyword.other.u_sub",
          "match": "\\b(update)\\b"
        },
        {
          "name": "keyword.other.v",
          "match": "\\b(value-counts|var|version|view-source)\\b"
        },
        {
          "name": "keyword.other.w",
          "match": "\\b(watch|when|where|which|window|with-column|with-env|wrap)\\b"
        },
        {
          "name": "keyword.other.z",
          "match": "\\b(zip)\\b"
        }
      ]
    },
    "strings":
    {
      "name": "string.quoted.double.nushell",
      "begin": "\"|'|`",
      "end": "\"|'|`"
    },
    "variable":
    {
      "match": "(alias|let|let-env)\\s+[\\$'\"]?([a-z A-Z0-9_-]+)['\"]?|(\\$[a-zA-Z0-9_\\-]+)|(\\|)([$a-zA-Z0-9-]+)[\\s,]+([$a-zA-Z0-9-]+)(\\|)",
      "name": "variable.nushell",
      "captures":
      {
        "1":
        {
          "name": "keyword.other.nushell"
        },
        "2":
        {
          "name": "variable.name.nushell"
        },
        "3":
        {
          "name": "variable.name.nushell"
        },
        "4":
        {
          "name": "punctuation.nushell"
        },
        "5":
        {
          "name": "variable.name.nushell"
        },
        "6":
        {
          "name": "variable.name.nushell"
        },
        "7":
        {
          "name": "punctuation.nushell"
        }
      }
    },
    "punctuation":
    {
      "patterns":
      [
        {
          "comment": "comma",
          "name": "punctuation.comma.nushell",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.nushell",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.nushell",
          "match": "[()]"
        },
        {
          "comment": "semicolon",
          "name": "punctuation.semi.nushell",
          "match": ";"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.nushell",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.nushell",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "comment":
    {
      "match": "(#.*)",
      "name": "comment.nushell"
    },
    "range":
    {
      "match": "(\\d+\\.\\.\\d+)",
      "name": "constant.nushell"
    },
    "digit":
    {
      "match": "(\\b[0-9]+\\b)",
      "name": "constant.numeric.nushell"
    },
    "parameter":
    {
      "match": "(\\s-[a-zA-Z_\\-]|--[a-zA-Z_\\-]{1,50})",
      "name": "variable.parameter.function.nushell"
    },
    "blockparam":
    {
      "match": "(\\|)([a-zA-Z0-9\\-\\_]+)(\\|)",
      "name": "variable.nushell",
      "captures":
      {
        "2":
        {
          "name": "variable.language.nushell"
        }
      }
    },
    "function":
    {
      "match": "\\b(def|def-env|extern)\\s+([\"'a-zA-Z0-9_\\- ]{1,})",
      "name": "entity.name",
      "captures":
      {
        "1":
        {
          "name": "entity.name.function.nushell"
        },
        "2":
        {
          "name": "entity.name.type.nushell"
        }
      }
    },
    "type":
    {
      "match": "([a-zA-Z0-9\\-_ ]+)(\\:[A-Za-z0-9\\-_ ]{1,})",
      "name": "storage",
      "captures":
      {
        "1":
        {
          "name": "storage.modifier.nushell"
        },
        "2":
        {
          "name": "storage.type.nushell"
        }
      }
    }
  }
}